rng("default")

load data input output

%节点个数
inputnum = 2;
hiddennum = 5;
outputnum = 1;

%训练数据和预测数据
input_train = input(1:1900,:)';
input_test = input(1901:2000,:)';
output_train = output(1:1900)';
output_test = output(1901:2000)';

%选连样本输入输出数据归一化
[inputn,inputps] = mapminmax(input_train);
[outputn,outputps] = mapminmax(output_train);

%构建网络
net = newff(inputn,outputn,hiddennum);

%% 遗传算法参数初始化
maxgen = 10;                         %进化代数，即迭代次数
sizepop = 10;                        %种群规模
pcross = 0.3;                       %交叉概率选择，0和1之间
pmutation = 0.1;                    %变异概率选择，0和1之间

%节点总数
numsum = hiddennum * (inputnum + outputnum + 1) + outputnum;

lenchrom = ones(1,numsum);
bound = [-3 * ones(numsum,1),3 * ones(numsum,1)];    %数据范围

individuals = struct('fitness',zeros(1,sizepop), 'chrom',[]);  %将种群信息定义为一个结构体

%初始化种群
for i = 1:sizepop
    %随机产生一个种群
    individuals.chrom(i,:) = Code(lenchrom,bound);    %编码（binary和grey的编码结果为一个实数，float的编码结果为一个实数向量）
    x = individuals.chrom(i,:);

    %计算适应度
    individuals.fitness(i) = fun(x,inputnum,hiddennum,outputnum,net,inputn,outputn);   %染色体的适应度
end

%找最好的染色体
[bestfitness,bestindex] = min(individuals.fitness);
bestchrom = individuals.chrom(bestindex,:);  %最好的染色体
avgfitness = sum(individuals.fitness) / sizepop; %染色体的平均适应度

% 记录每一代进化中最好的适应度和平均适应度
trace = zeros(maxgen + 1,2);
trace(1,:) = [avgfitness,bestfitness];

%% 迭代求解最佳初始阀值和权值
for i = 1:maxgen
    % 选择
    individuals = Select(individuals,sizepop);
    %交叉
    individuals.chrom = Cross(pcross,lenchrom,individuals.chrom,sizepop,bound);
    % 变异
    individuals.chrom = Mutation(pmutation,lenchrom,individuals.chrom,sizepop,i,maxgen,bound);

    % 计算适应度
    for j = 1:sizepop
        x = individuals.chrom(j,:); %解码
        individuals.fitness(j) = fun(x,inputnum,hiddennum,outputnum,net,inputn,outputn);
    end

    %找到最小和最大适应度的染色体及它们在种群中的位置
    [newbestfitness,newbestindex] = min(individuals.fitness);
    [worestfitness,worestindex] = max(individuals.fitness);

    % 代替上一次进化中最好的染色体
    if bestfitness > newbestfitness
        bestfitness = newbestfitness;
        bestchrom = individuals.chrom(newbestindex,:);
    end
    individuals.chrom(worestindex,:) = bestchrom;
    individuals.fitness(worestindex) = bestfitness;

    avgfitness = sum(individuals.fitness) / sizepop;

    trace(i + 1,:) = [avgfitness,bestfitness]; %记录每一代进化中最好的适应度和平均适应度

end

%% 遗传算法结果分析
figure(1)
r = maxgen + 1;
plot((1:r)',trace(:,2),'b--');
title(['适应度曲线  ' '终止代数＝',num2str(maxgen)]);
xlabel('进化代数');
ylabel('适应度');
legend('平均适应度','最佳适应度');
disp('适应度                   变量');
x = bestchrom;

%% 把最优初始阀值权值赋予网络预测
fact1 = inputnum * hiddennum;
fact2 = hiddennum * outputnum;
sum1 = fact1 + hiddennum;
sum2 = sum1 + fact2;

w1 = x(1        :fact1);
B1 = x(fact1 + 1:sum1);
w2 = x(sum1  + 1:sum2);
B2 = x(sum2  + 1:sum2 + outputnum);

net.iw{1,1} = reshape(w1,hiddennum,inputnum);
net.lw{2,1} = reshape(w2,outputnum,hiddennum);
net.b{1} = reshape(B1,hiddennum,1);
net.b{2} = B2;

%% BP网络训练
net.trainParam.epochs = 100;
net.trainParam.lr = 0.1;

%网络训练
net = train(net,inputn,outputn);

%% BP网络预测
inputn_test = mapminmax('apply',input_test,inputps);
an = sim(net,inputn_test);
test_simu = mapminmax('reverse',an,outputps);
error = test_simu - output_test;
