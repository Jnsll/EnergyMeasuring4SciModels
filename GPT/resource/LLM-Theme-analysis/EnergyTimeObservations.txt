
Energy - / Runtime +

1) BPDLX.m:
Energy : -
Runtime: +
Themes:
    "Improved Code Efficiency"
    "Improved Code Readability & Maintainability"
    "Improved Comments"
Interpretation:
Energy -: Using preallocation and logical indexing to avoid switch block nested inside for loop might save energy.
Runtime +: On the other hand side extracting code blocks inside new help functions might cause runtime overhead.

2) chap11_4.m:
Energy : -
Runtime: +
Themes:
    "Improved Code Readability & Maintainability"
    "Removed Unnecessary Code"
Interpretation:
Energy -: Removing calls to 'clear all' and clc might save energy.
Runtime +: Extracting code blocks inside new help functions might cause runtime overhead.

5) gen_class_info_cityscapes.m:
Energy : -
Runtime: +
Themes:
    "Improved Code Efficiency"
    "Improved Code Readability & Maintainability"
Interpretation:
Runtime +: Runtime might have been increased because of load() statement followed by dot indexation inferring runtime overhead.
Energy -: Although energy might have been lowered by the same construct because a temporary variable could be avoided.

6) houseL.m:
Energy : -
Runtime: +
Themes:
    "Improved Code Efficiency"
    "Improved Code Readability & Maintainability"
    "Removed Unnecessary Code"
Interpretation:
Energy -: Energy might have been reduced by assigning load() results directly to a variable instead of loading it into the workspace first and then assigning it to the variable. An other fact that could reduce the energy is suppressing output
to the command window.
Runtime +: Runtime might have been increased due to assigning output to variable (for testing)

8) main.m (sampling/repos_projects_filtered_top100stars/Smart-Algorithm/Particle_Swarm_Optimization/PSO-basic/main.m):
Energy : -
Runtime: +
Themes:
    "Removed Unnecessary Code"
Interpretation:
Runtime +: Runtime might have got increased due to extracting functions causing function call overhead.
Energy -: Energy might have been reduced by suppressing unused function output when calling [~,res] = max(). Also an unnecessary if block inside a while loop got removed.

9) main.m (sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/MATLABæ™ºèƒ½ç®—æ³•30ä¸ªæ¡ˆä¾‹åˆ†æž/chapter22 èšç¾¤ç®—æ³•çš„ä¼˜åŒ–è®¡ç®—â€”â€”æ—…è¡Œå•†é—®é¢˜ï¼ˆTSPï¼‰ä¼˜åŒ–/main.m):
Energy : -
Runtime: +
Themes:
    "Improved Code Efficiency"
    "Improved Code Readability & Maintainability"
    "Improved Indexing & Loops"
    "Others"
    "Removed Unnecessary Code"
Interpretation:
Energy -: Energey might have been reduced due to assigning load result directly to variable instead of loading into workspace and then assigning to variable.
Runtime +: On the other hand side this might consume more runtime (due to dot-indexing).
Matrix symmetry has been taken advantage of which reduced amount of for loop iterations by half. This is supposed to save both energy and runtime.
Runtime +: Runtime could have been increased because of function extraction (function call overhead).

11) sa_tsp.m:
Energy : -
Runtime: +
Themes:
    "Improved Code Efficiency"
    "Improved Code Readability & Maintainability"
    "Improved Indexing & Loops"
    "Others"
    "Removed Unnecessary Code"
Interpretation:
Matrix symmetry has been made use of. This is expected to reduce both runtime and energy.
Runtime +: Runtime might have been increased due to function call overhead (extracting help functions).








<<<<<<< HEAD


=======
>>>>>>> ec33a1bcaadea98d0472e5b518a0f8fd9aed5e16
Energy + / Runtime -

4) example1.m:
Energy : +
Runtime: -
Themes:
    "Improved Code Efficiency"
    "Improved Code Readability & Maintainability"
    "Improved Indexing & Loops"
    "Removed Unnecessary Code"
Interpretation:
Runtime -: Using fplot instead of ezplot (which takes a function description as a string as input) might have reduced runtime.
Energy +: Adding results in a struct (for testing) might have increased energy.

7) init_workspace.m:
Energy : +
Runtime: -
Themes:
    "Improved Code Efficiency"
    "Removed Unnecessary Code"
Interpretation:
Energy +: Energy might have increased due to additional call to rng('default') to set a random generator seed.
Runtime -: Runtime might have been reduced by omiting unnecessary call to tic at the end of the script.

10) MAIN_minThrottleTraj.m:
Energy : +
Runtime: -
Themes:
    "Improved Code Efficiency"
    "Improved Code Readability & Maintainability"
    "Removed Unnecessary Code"
Interpretation:
Runtime -: Runtime might have been reduced by omiting calls to clear and clc.
Energy + : Energy  might have been increased due to introduction of temporary help variable.

3) chapter1_1: unusable due to missing human optimizations
