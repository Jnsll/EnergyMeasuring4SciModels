script_name;original_energy;original net;optimized_gpt3_energy;original net in % of total;optimized_gpt4_energy;optimized_llama_energy;optimized_mixtral_energy;baseline_energy;optimized_human_energy;optimized human net;Diff Human-Original;Quot Human/Original;Quot Human/Original net;Diff Human-GPT4;Quot Human/GPT4;Pack;Size;original_memory;optimized_gpt3_memory;optimized_gpt4_memory;optimized_llama_memory;optimized_mixtral_memory;baseline_memory;optimized_human_memory;original_time;original time net;energy / time (net);energy / time;optimized_gpt3_time;optimized_gpt4_time;optimized_llama_time;optimized_mixtral_time;baseline_time;optimized_human_time;original_script;Length;original script name;Sci/Non-Sci;optimized_gpt3-Themes;optimized_gpt3-Theme-Human;optimized_gpt4-Themes;optimized_gpt4-Theme-Human;optimized_llama-Themes;optimized_llama-Theme-Human;optimized_mixtral-Themes;optimized_mixtral-Theme-Human
æ¡ˆä¾‹22 LVQç¥žç»ç½‘ç»œçš„é¢„æµ‹â€”â€”äººè„¸æœå‘è¯†åˆ«__crossvalind_lvq;105.76329040532777;6.39;216.44;6.0%;213.62164815269256;215.09444071454928;213.2240636189934;99.37576700845383;108.78601633723204;9.41;3.02;1.03;1.47;-104.84;0.51;Pack 1;Large;69.40078125;125.64557291666668;123.46458333333334;131.81770833333334;130.48385416666667;48.70520833333333;74.41992188;8.5499;0.00;95812.85;12.37;18.2533;17.359900000000003;17.65983333333333;17.706466666666667;8.549833333333334;9.7099;sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/HeuristicAlgorithmï¼ˆè¡¥åˆ†å¯å‘å¼ç®—æ³•ï¼ŒåŒ…æ‹¬ç¥žç»ç½‘ç»œã€æ¨¡æ‹Ÿé€€ç«ã€é—ä¼ ç®—æ³•ï¼‰/ç¥žç»ç½‘ç»œç®—æ³•/MATLABç¥žç»ç½‘ç»œ30ä¸ªæ¡ˆä¾‹åˆ†æž/æ¡ˆä¾‹22 LVQç¥žç»ç½‘ç»œçš„é¢„æµ‹â€”â€”äººè„¸æœå‘è¯†åˆ«/crossvalind_lvq.m;294;Algorithms_MathModels/HeuristicAlgorithmï¼ˆè¡¥åˆ†å¯å‘å¼ç®—æ³•ï¼ŒåŒ…æ‹¬ç¥žç»ç½‘ç»œã€æ¨¡æ‹Ÿé€€ç«ã€é—ä¼ ç®—æ³•ï¼‰/ç¥žç»ç½‘ç»œç®—æ³•/MATLABç¥žç»ç½‘ç»œ30ä¸ªæ¡ˆä¾‹åˆ†æž/æ¡ˆä¾‹22 LVQç¥žç»ç½‘ç»œçš„é¢„æµ‹â€”â€”äººè„¸æœå‘è¯†åˆ«/crossvalind_lvq.m;;Removed unnecessary HTML comments and links that do not contribute to the code functionality., Removed redundant comments and excessive spacing for better code readability., Improved variable naming for clarity and consistency., Eliminated redundant calculations and optimized loops for better performance., Streamlined the cross-validation process for finding the optimal number of neurons., Enhanced the display of results for easier interpretation and analysis.;Removed Unnecessary Code, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Removed Unnecessary Code, nan, nan;Vectorized Operations, Preallocation and Initialization, Logical Indexing, Removed Redundant Calculations, Improved Readability, Inf for Initialization;Vectorization, Improved Memory Management, Improved Indexing & Loops, Removed Unnecessary Code, Improved Code Readability & Maintainability, Improved Code Efficiency;Removed unnecessary HTML code and comments, which were not relevant to the code's functionality., Simplified the calculation of `rate` by using `histc` instead of a loop., Removed the `web browser` commands, which were not necessary for the code's execution., Removed the `waitbar` command, which was not necessary for the code's execution and can be replaced with a more efficient progress bar implementation., Simplified the code by removing unnecessary variables and consolidating similar operations., Improved code readability by adding whitespace and consistent indentation., Removed the `disp` statements that were not necessary for the code's execution.;Improved Comments, Improved Code Efficiency, Removed Unnecessary Code, nan, Removed Unnecessary Code, Improved Code Readability & Maintainability, Removed Unnecessary Code;Removed unnecessary semicolons to improve readability., Replaced `clear all` with `clear` to avoid clearing functions and classes., Combined multiple `fprintf` statements into single statements for better performance., Added comments to explain the purpose of different sections of the code., Added a check for the Parallel Computing Toolbox and used `parfor` for parallel computation to speed up the optimization process., Removed redundant lines of code that did not affect the output or performance., Improved variable naming for better understanding., Removed unnecessary HTML code and replaced it with comments.;Improved Code Readability & Maintainability, Removed Unnecessary Code, nan, Improved Comments, Improved Parallel Processing, nan, nan, nan
æ¡ˆä¾‹10 ç¦»æ•£Hopfieldç¥žç»ç½‘ç»œçš„åˆ†ç±»â€”â€”é«˜æ ¡ç§‘ç ”èƒ½åŠ›è¯„ä»·__chapter10;105.96486918134808;6.59;212.04831441248143;6.2%;218.4585759480678;215.3159932454854;272.62853393550614;99.37576700845383;107.18638712557345;7.81;1.22;1.01;1.19;-111.27;0.49;Pack 2;Large;58.61796875;104.42877604166668;124.353125;110.2402344;107.7296875;48.70520833333333;89.4046875;8.576566666666668;0.03;246.48;12.36;18.640233333333335;17.886633333333336;17.9666;17.88;8.549833333333334;9.53;sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/HeuristicAlgorithmï¼ˆè¡¥åˆ†å¯å‘å¼ç®—æ³•ï¼ŒåŒ…æ‹¬ç¥žç»ç½‘ç»œã€æ¨¡æ‹Ÿé€€ç«ã€é—ä¼ ç®—æ³•ï¼‰/ç¥žç»ç½‘ç»œç®—æ³•/MATLABç¥žç»ç½‘ç»œ30ä¸ªæ¡ˆä¾‹åˆ†æž/æ¡ˆä¾‹10 ç¦»æ•£Hopfieldç¥žç»ç½‘ç»œçš„åˆ†ç±»â€”â€”é«˜æ ¡ç§‘ç ”èƒ½åŠ›è¯„ä»·/chapter10.m;305;Algorithms_MathModels/HeuristicAlgorithmï¼ˆè¡¥åˆ†å¯å‘å¼ç®—æ³•ï¼ŒåŒ…æ‹¬ç¥žç»ç½‘ç»œã€æ¨¡æ‹Ÿé€€ç«ã€é—ä¼ ç®—æ³•ï¼‰/ç¥žç»ç½‘ç»œç®—æ³•/MATLABç¥žç»ç½‘ç»œ30ä¸ªæ¡ˆä¾‹åˆ†æž/æ¡ˆä¾‹10 ç¦»æ•£Hopfieldç¥žç»ç½‘ç»œçš„åˆ†ç±»â€”â€”é«˜æ ¡ç§‘ç ”èƒ½åŠ›è¯„ä»·/chapter10.m;;Removed unnecessary comments and HTML code that does not contribute to the functionality of the code, reducing the code size and improving readability., Replaced nested loops with more efficient matrix operations like `imagesc` for plotting, which is faster and more energy-efficient., Simplified variable naming and removed redundant code segments to streamline the execution flow., By optimizing the code structure and using more efficient functions, the energy consumption of the code during execution is reduced.;Improved Code Readability & Maintainability, nan, nan, nan;Clear Specific Variables, Combine Clear and Clc, Remove Redundant Semicolons, Optimize Data Loading, Simplify Data Preparation, Vectorize Plotting;Removed Unnecessary Code, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, nan, nan;Removed unnecessary HTML code, Removed unnecessary comments, Improved code organization, Removed unnecessary web browser commands, Improved variable naming, Removed unnecessary semicolons;Removed Unnecessary Code, Improved Comments, Improved Code Readability & Maintainability, Removed Unnecessary Code, Improved Code Readability & Maintainability, Removed Unnecessary Code;Removed unnecessary semicolons at the end of lines to improve readability., Combined the separate elements of the matrix A into a single row using a comma separator, which is more efficient and easier to read., Removed unnecessary parentheses around the indexing of the output matrix Y in the results display section, which simplifies the code and improves readability., Replaced the cell array A with a regular matrix, which is more memory-efficient and easier to work with., Removed unnecessary curly braces around the input to the sim function, which simplifies the code and improves readability., Combined the separate rows of the noisy matrix into a single line using a semicolon separator, which is more memory-efficient and easier to read., Removed unnecessary parentheses around the indexing of the output matrix y in the final simulation section, which simplifies the code and improves readability.;Improved Code Readability & Maintainability, nan, Improved Code Readability & Maintainability, nan, Improved Code Readability & Maintainability, nan, Improved Code Readability & Maintainability
chapter1__BPDLX;113.17277221669598;13.80;102.43630777997508;12.2%;108.9542755126992;115.70464986167303;110.7094340005618;99.37576700845383;111.20970764162485;11.83;-1.96;0.98;0.86;2.26;1.02;Pack 2;Large;61.526432291666666;48.694401041666666;58.52174479166667;53.151432291666666;55.39622395833333;48.70520833333333;106.4757813;8.689966666666667;0.14;98.46;13.02;8.549966666666666;9.2568;9.270066666666667;9.4167;8.549833333333334;9.7034;sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/ã€ŠMATLAB ç¥žç»ç½‘ç»œ30ä¸ªæ¡ˆä¾‹åˆ†æžã€‹æºç¨‹åº æ•°æ®/chapter1/BPDLX.m;142;Algorithms_MathModels/ã€ŠMATLAB ç¥žç»ç½‘ç»œ30ä¸ªæ¡ˆä¾‹åˆ†æžã€‹æºç¨‹åº æ•°æ®/chapter1/BPDLX.m;;Vectorization, Reduced Redundancy, Optimized Data Handling, Improved Code Readability;Vectorization, Removed Unnecessary Code, No Manual Inspection, Improved Code Readability & Maintainability;Matrix Concatenation, Vectorized Operations, Random Permutation, Pre-allocation, Simplified Calculations, Code Readability;Improved Matrix Operations, Vectorization, Improved Code Efficiency, Improved Memory Management, nan, Improved Code Readability & Maintainability;Removed unnecessary HTML code, Simplified data loading, Combined data matrices, Removed redundant calculations, Simplified error calculation, Removed unnecessary variables, Improved code organization, Removed magic numbers, Improved variable naming, Added comments and whitespace;Removed Unnecessary Code, Improved Code Readability & Maintainability, Removed Unnecessary Code, Removed Unnecessary Code, Improved Error Handling, Removed Unnecessary Code, Improved Code Readability & Maintainability, Removed Unnecessary Code, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability;Simplified data concatenation, Simplified output matrix creation, Simplified input and output matrices, Simplified network training loop, Simplified error calculation, Simplified output and error calculation, Simplified finding the maximum output;nan, nan, nan, nan, Improved Error Handling, Improved Code Readability & Maintainability, nan
chapter1__chapter1_1;174.3883600871156;75.01;106.27870737714888;43.0%;113.00848236091552;122.04610544829048;107.52791290277382;99.37576700845383;112.5846013385492;13.21;-61.80;0.65;0.18;-0.42;1.00;Pack 2;Large;58.465625;48.321614583333336;53.57734375;62.41979166666667;54.55481770833333;48.70520833333333;78.05169270833333;9.4375;0.89;84.51;18.48;9.230066666666668;8.9966;8.9901;8.9366;8.549833333333334;9.5566;sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/ã€ŠMATLAB ç¥žç»ç½‘ç»œ30ä¸ªæ¡ˆä¾‹åˆ†æžã€‹æºç¨‹åº æ•°æ®/chapter1/chapter1_1.m;147;Algorithms_MathModels/ã€ŠMATLAB ç¥žç»ç½‘ç»œ30ä¸ªæ¡ˆä¾‹åˆ†æžã€‹æºç¨‹åº æ•°æ®/chapter1/chapter1_1.m;;Vectorization, Optimized Indexing, Optimized Variable Initialization, Optimized Network Training, Improved Code Readability;Vectorization, Improved Indexing & Loops, No Manual Inspection, nan, Improved Code Readability & Maintainability;Matrix Preallocation and Concatenation, Vectorized Operations, Removed Redundant Variables, Simplified Weight Updates, Reduced Loop Overhead;Improved Memory Management, Vectorization, Improved Comments, Improved Code Efficiency, Improved Indexing & Loops;Removed unnecessary HTML code, Simplified data loading, Improved data concatenation, Removed redundant variables, Improved loop optimization, Removed unnecessary comments, Improved code organization, Removed unused variables;Removed Unnecessary Code, Improved Code Readability & Maintainability, nan, Removed Unnecessary Code, No Optimization, Improved Comments, Improved Code Readability & Maintainability, Removed Unnecessary Code;Use vectorized operations instead of loops whenever possible. This can significantly reduce the execution time and improve energy efficiency., Remove unnecessary variables and operations. For example, we can remove the temporary variables `w1_1`, `w1_2`, `b1_1`, `b1_2`, `w2_1`, `w2_2`, `b2_1`, and `b2_2` as they are not used outside the loop., Use built-in functions instead of custom implementations. For example, we can use the `tansig` function instead of manually computing the sigmoid function., We replaced the `for` loop with vectorized operations, which significantly reduces the execution time and improves energy efficiency., We removed unnecessary variables and operations, which reduces the memory usage and improves energy efficiency., We used built-in functions instead of custom implementations, which reduces the code complexity and improves energy efficiency.;Improved Indexing & Loops, Removed Unnecessary Code, nan, Vectorization, Removed Unnecessary Code, nan
PSO-basic__main;115.03;15.66;113.41731058767375;13.6%;105.58614857989596;112.5179702758983;112.42704518635486;99.37576700845383;114.96460978191656;15.59;-0.07;1.00;1.00;9.38;1.09;Pack 2;Small;52.19947916666667;51.85351563;58.446614583333336;70.78554688;57.4078125;48.70520833333333;110.86080729166666;8.756633333333333;0.21;75.71;13.14;8.603266666666666;8.976600000000001;8.9965;9.376766666666667;8.549833333333334;9.796766666666667;sampling/repos_projects_filtered_top100stars/Smart-Algorithm/Particle_Swarm_Optimization/PSO-basic/main.m;105;Smart-Algorithm/Particle_Swarm_Optimization/PSO-basic/main.m;;Parameterization, Loop Optimization, Efficiency;nan, Improved Indexing & Loops, Others;Parameter Consolidation, Looping Structure, Cell Array Storage;Improved Code Efficiency, nan, nan;Code deduplication, Using `deal` for assignment, Reducing memory allocation, Improving code readability;Removed Unnecessary Code, Improved Code Efficiency, Improved Memory Management, Improved Code Readability & Maintainability;Preallocation, Removing redundant code, Running the PSO function once for each set of parameters;Improved Memory Management, Removed Unnecessary Code, nan
chapter22 èšç¾¤ç®—æ³•çš„ä¼˜åŒ–è®¡ç®—â€”â€”æ—…è¡Œå•†é—®é¢˜ï¼ˆTSPï¼‰ä¼˜åŒ–__main;116.52211558027967;17.15;107.33499450679324;14.7%;112.88137207026982;112.1028920491808;105.36394399003863;99.37576700845383;106.4923339846156;7.12;-10.03;0.91;0.42;-6.39;0.94;Pack 1;Large;66.95651041666666;61.00533854166667;50.569661458333336;61.14635416666667;57.02109375;48.70520833333333;81.84010416666666;8.776666666666666;0.23;75.59;13.28;9.503366666666668;9.096666666666666;9.103299999999999;9.503433333333332;8.549833333333334;9.263266666666667;sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/MATLABæ™ºèƒ½ç®—æ³•30ä¸ªæ¡ˆä¾‹åˆ†æž/chapter22 èšç¾¤ç®—æ³•çš„ä¼˜åŒ–è®¡ç®—â€”â€”æ—…è¡Œå•†é—®é¢˜ï¼ˆTSPï¼‰ä¼˜åŒ–/main.m;183;Algorithms_MathModels/MATLABæ™ºèƒ½ç®—æ³•30ä¸ªæ¡ˆä¾‹åˆ†æž/chapter22 èšç¾¤ç®—æ³•çš„ä¼˜åŒ–è®¡ç®—â€”â€”æ—…è¡Œå•†é—®é¢˜ï¼ˆTSPï¼‰ä¼˜åŒ–/main.m;;Replaced nested loops for calculating distances between cities with vectorized operations for improved efficiency., Used `randi` and `randsample` functions for random number generation to avoid unnecessary loops., Replaced `ismember` function with `setdiff` for faster computation of allowed cities., Eliminated unnecessary variable assignments within loops to reduce memory usage and improve speed., Streamlined the code structure for better readability and maintainability.;Vectorization, nan, nan, nan, Improved Code Readability & Maintainability;Distance Calculation, Random Start Cities, Set Operations, Vectorized Length Calculation, Single Find Call, Overall Code Clarity;Improved Code Readability & Maintainability, nan, Improved Code Efficiency, Vectorization, nan, nan;Reduced redundant calculations, Improved vectorization, Simplified code structure, Removed unnecessary HTML code, Improved variable naming;Removed Unnecessary Code, Vectorization, Improved Code Readability & Maintainability, Removed Unnecessary Code, Improved Code Readability & Maintainability;Use vectorized operations instead of loops, Preallocate arrays, Avoid unnecessary calculations;Improved Code Efficiency, Improved Memory Management, No Manual Inspection
ç¬¬10ç«  éšæœºç¥žç»ç½‘ç»œ__sa_tsp;111.93886973066256;12.56;109.31852366133438;11.2%;118.0527058919232;105.1244140624903;102.79989522297984;99.37576700845383;111.08087615966797;11.71;-0.86;0.99;0.93;-6.97;0.94;Pack 1;Large;48.69622395833333;57.497395833333336;57.54830729166667;58.40039063;56.99752604166667;48.70520833333333;110.62213541666668;8.823266666666667;0.27;45.95;12.69;9.183433333333333;9.036566666666667;9.023333333333333;8.970033333333333;8.549833333333334;9.3233;sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/ã€ŠMATLABç¥žç»ç½‘ç»œåŽŸç†ä¸Žå®žä¾‹ç²¾è§£ã€‹éšä¹¦é™„å¸¦æºç¨‹åº/ç¬¬10ç«  éšæœºç¥žç»ç½‘ç»œ/sa_tsp.m;170;Algorithms_MathModels/ã€ŠMATLABç¥žç»ç½‘ç»œåŽŸç†ä¸Žå®žä¾‹ç²¾è§£ã€‹éšä¹¦é™„å¸¦æºç¨‹åº/ç¬¬10ç«  éšæœºç¥žç»ç½‘ç»œ/sa_tsp.m;;Replaced the nested loop for calculating the distance matrix with the pdist and squareform functions, which are more efficient for calculating pairwise distances between points., Removed unnecessary commas in the matrix definition for better readability., Removed unnecessary semicolons after loop conditions for better code consistency., Updated indexing in plotting to directly access rows of the position matrix for improved efficiency., Reorganized code layout for better readability and clarity.;nan, Improved Code Readability & Maintainability, nan, Improved Indexing & Loops, Improved Code Readability & Maintainability;Symmetry Exploitation in Distance Calculation, Function Definitions, Vectorization;nan, No Manual Inspection, Vectorization;Vectorization, Removing unnecessary variables, Simplifying conditional statements, Removing redundant calculations, Using more efficient data structures;Vectorization, Removed Unnecessary Code, Improved Code Readability & Maintainability, Removed Unnecessary Code, Improved Code Efficiency;The original code calculates the distance matrix using a nested for loop, which is not efficient. Instead, we can use the built-in MATLAB function `pdist` to calculate the Euclidean distance between all pairs of points, and then convert the result to a symmetric matrix using the `squareform` function. This reduces the number of operations from O(n^2) to O(n), where n is the number of points., The original code uses a nested for loop to generate the new path and calculate its length. However, we can optimize this by generating the new path only once and then calculating its length in the same loop. This reduces the number of operations from O(n^2) to O(n)., The original code uses a nested for loop to update the best path and its length. However, we can optimize this by updating the best path and its length only when a new best path is found. This reduces the number of operations from O(n^2) to O(n)., The original code uses a nested for loop to plot the best path. However, we can optimize this by using a single for loop to plot all segments of the best path. This reduces the number of operations from O(n^2) to O(n).;nan, nan, nan, nan
ex6__getVocabList;110.73736114509714;11.36;217.10376993816465;10.3%;220.84749603268185;224.5518737793318;213.37022450765943;99.37576700845383;119.88990987141928;20.51;9.15;1.08;1.81;-100.96;0.54;Pack 2;Small;46.680989583333336;164.0890625;125.65950520833331;136.39231770833334;134.98841145833333;48.70520833333333;98.26158854166668;8.849933333333333;0.30;37.86;12.51;17.753233333333334;18.546799999999998;18.84013333333333;17.899833333333333;8.549833333333334;10.3969;sampling/repos_projects_filtered_top100stars/Coursera-Machine-Learning-Stanford/Week 7/Programming Assignment/machine-learning-ex6/ex6/getVocabList.m;149;Coursera-Machine-Learning-Stanford/Week 7/Programming Assignment/machine-learning-ex6/ex6/getVocabList.m;;Replaced the loop that reads the words from the file with a more efficient while loop that reads the file line by line until the end. This eliminates the need for explicitly reading word indices and simplifies the code., By using `fgetl(fid)` instead of `fscanf(fid, '%s', 1)`, we directly read each line as a string, avoiding unnecessary parsing for integers. This reduces the complexity of the code and makes it more energy-efficient., By removing the unnecessary word index reading, the code becomes more concise and easier to understand without affecting its functionality.;nan, nan, nan;Preallocation, Reading File Content, Simplified Loop, File Closing;Improved Memory Management, nan, Improved Indexing & Loops, nan;Reduced Number of File I/O Operations, Vectorized Operation, Memory Efficiency, Simplified Code;No Manual Inspection, Vectorization, Improved Memory Management, Improved Code Readability & Maintainability;Preallocation, File reading optimization, Extracting words, Removing unnecessary comments;Improved Memory Management, nan, nan, nan
p3__p3;102.31720631910332;2.94;106.49622751878924;2.9%;107.11946360275032;103.83287150057537;113.73556671151697;99.37576700845383;107.82032470689155;8.44;5.50;1.05;2.87;0.70;1.01;Pack 2;Medium;65.72304688;42.76419270833333;62.61302083333333;54.67382813;47.464192708333336;48.70520833333333;105.3410156;8.629866666666667;0.08;36.75;11.86;8.936666666666666;9.170033333333333;8.790033333333334;8.863233333333334;8.549833333333334;9.510033333333332;sampling/repos_projects_filtered_top100stars/Math_Model/2-1å›½èµ›é¢˜ç›®+è®ºæ–‡/2013/B254/814å§œè£æ°ï¼Œæœ±ä½³äº­ï¼Œé‡‘å»ºé‚¦/ç¨‹åº/p3/p3.m;140;Math_Model/2-1å›½èµ›é¢˜ç›®+è®ºæ–‡/2013/B254/814å§œè£æ°ï¼Œæœ±ä½³äº­ï¼Œé‡‘å»ºé‚¦/ç¨‹åº/p3/p3.m;;Replaced the inefficient loop for generating image names with a vectorized approach, reducing unnecessary iterations and string concatenations., Utilized the `all` function to check if all elements in a specific range of rows are equal to 255, simplifying the logic and improving readability., Removed unnecessary commented-out code and unused variables to enhance code clarity and maintainability., Optimized the comparison operation to only check for equality with 255, which is more concise and efficient compared to checking individual elements separately.;Vectorization, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, nan;Vectorized Operations, Preallocation, Helper Function, Avoiding Repeated Computation, Code Clarity, Display Results;Vectorization, Improved Memory Management, Others, No Manual Inspection, Improved Code Readability & Maintainability, Improved Plots;Reduced number of `strcat` operations, Removed redundant code, Vectorized operations, Simplified indexing, Removed unnecessary variables, Improved readability;nan, Removed Unnecessary Code, Vectorization, Improved Indexing & Loops, Removed Unnecessary Code, Improved Code Readability & Maintainability;Preallocate array for image filenames, Use a single loop to generate image filenames, Use logical indexing, Eliminate unnecessary computations, Use vectorized operations, Remove unused variables, Use appropriate data types;Improved Memory Management, nan, Improved Indexing & Loops, Removed Unnecessary Code, Vectorization, Removed Unnecessary Code, Improved Code Efficiency
afni__Test_BrikLoad;106.54514668783328;7.17;105.49287414548648;6.7%;107.87996470135404;104.41705169677152;109.28406626384046;99.37576700845383;111.61162872313676;12.24;5.07;1.05;1.71;3.73;1.03;Pack 1;Medium;70.92565104166667;51.23059895833333;65.834375;61.91132813;49.98085938;48.70520833333333;105.9945313;8.789933333333332;0.24;29.86;12.12;8.903266666666667;9.003200000000001;8.576466666666667;9.156633333333332;8.549833333333334;9.449966666666667;sampling/repos_projects_filtered_top100stars/fieldtrip/external/afni/Test_BrikLoad.m;84;fieldtrip/external/afni/Test_BrikLoad.m;;Removed unnecessary comments and empty lines to make the code more concise and easier to read., Changed the value of the `DBG` flag to 0 as it was not used in the provided code, thus reducing unnecessary operations., Replaced the variable `err` with a tilde (`~`) in the output assignments to indicate that the error variable is not being used, improving code readability., Reduced the number of output variables from the `BrikLoad` function to only those that are needed, minimizing unnecessary memory allocation and processing time., By optimizing the code in this way, we aim to improve energy efficiency by reducing unnecessary operations and memory usage.;Improved Comments, nan, Improved Code Readability & Maintainability, Removed Unnecessary Code, nan;Single File Load, Error Handling, Function for Format Conversion, Vectorization;nan, Improved Error Handling, nan, Vectorization;Reduced repeated code, Improved memory management, Simplified code structure, Removed unnecessary assignments, Improved code organization;No Manual Inspection, Improved Memory Management, Improved Code Readability & Maintainability, Removed Unnecessary Code, Improved Code Readability & Maintainability;Preallocate memory for the outputs, Combine the three calls to `BrikLoad` into a single loop, Use a cell array to store the outputs, Use a loop index to access the options;Improved Memory Management, nan, nan, nan
private__getEnvironment;105.04958241778658;5.67;340.01284027099416;5.4%;390.5739308677439;320.3643976847428;322.90617879213147;99.37576700845383;113.56865793882558;14.19;8.52;1.08;2.50;-277.01;0.29;Pack 2;Small;66.05481770833333;167.28138020833333;190.48098958333333;179.95833333333331;182.5648438;48.70520833333333;73.83763020833334;8.769933333333332;0.22;25.78;11.98;26.756466666666668;26.809966666666668;26.89646666666667;27.910066666666665;8.549833333333334;9.2699;sampling/repos_projects_filtered_top100stars/matlab2tikz/src/private/getEnvironment.m;85;matlab2tikz/src/private/getEnvironment.m;;Removed unnecessary comparison `~= 0` in the `exist` function call as it already returns a logical value., Added comments for better code readability and understanding., Removed the TODO comment as it does not contribute to the code optimization., Refactored the code for better clarity and maintainability without changing its functionality.;nan, Improved Code Readability & Maintainability, nan, Improved Code Readability & Maintainability;Separate Persistent Variables, Direct Assignment, Simplified Conditional Check;No Manual Inspection, No Manual Inspection, Improved Code Readability & Maintainability;Extracted a separate function for the environment detection logic, Reduced the number of assignments to the cache, Removed unnecessary variable declarations, Improved code organization;Improved Code Readability & Maintainability, No Manual Inspection, Removed Unnecessary Code, Improved Code Readability & Maintainability;The original code stores the environment and version string in separate variables `env` and `versionString`, and then stores them in the cache. Instead, it is more efficient to directly store the values in the cache without using intermediate variables. This reduces memory usage and improves energy efficiency., In the original code, the `ver` function is called with the argument `env`, which is a string variable. However, since `env` is already stored in the cache, it is more efficient to call `ver` with the cached value `cache.env` instead of the variable `env`. This reduces the number of operations and improves energy efficiency., The original code uses the `persistent` keyword to declare the `cache` variable, which is good for energy efficiency because it avoids the overhead of creating a new variable every time the function is called. However, it is important to note that the `persistent` keyword should be used with caution, as it can lead to unexpected behavior if not used correctly. In this case, it is used appropriately to store the environment and version string between function calls.;nan, nan, nan
code__evaluation;109.24942270918594;9.87;124.21763203938026;9.0%;107.7581090291438;110.97761484784036;109.51955617270043;99.37576700845383;110.03247833241088;10.66;0.78;1.01;1.08;2.27;1.02;Pack 1;Medium;63.50572916666667;56.38372395833333;50.91210938;66.33697916666667;52.17942708333333;48.70520833333333;94.72096354166666;8.9366;0.39;25.53;12.22;10.650466666666667;8.9899;8.969899999999999;8.956633333333333;8.549833333333334;9.283366667;sampling/repos_projects_filtered_top100stars/face_verification_experiment/code/evaluation.m;91;face_verification_experiment/code/evaluation.m;;Preallocation of Arrays, Eliminating Redundant Code, Code Readability, Efficient Memory Usage;Improved Memory Management, Removed Unnecessary Code, Improved Code Readability & Maintainability, Improved Memory Management;Preallocation of Memory, Concatenation of Scores and Labels, Code Comments;Improved Memory Management, nan, Improved Comments;Pre-allocation of memory, Vectorization using arrayfun, Removed unnecessary code, No changes to logic;Improved Memory Management, Vectorization, Removed Unnecessary Code, No Optimization;Preallocate memory for pos_scores and neg_scores, Combine the computation of pos_scores and neg_scores into a single loop, Handle the remaining neg_scores (if any);Improved Memory Management, nan, nan
chap11__chap11_4;119.28916320808156;19.91;108.19;16.7%;108.67721608480788;105.34275512703655;118.35772247319304;99.37576700845383;110.01182149257512;10.64;-9.28;0.92;0.53;1.33;1.01;Pack 2;Small;48.489322916666666;67.12916666666666;48.87955729166666;50.62200520833333;71.87604166666667;48.70520833333333;68.72473958333333;9.350266666666666;0.80;24.88;12.76;9.316733333333334;9.250066666666667;8.769933333333332;8.763333333333334;8.549833333333334;9.4233;sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/ã€ŠMATLABå›¾åƒå¤„ç†ã€‹æºæ–‡ä»¶/æœ¬ä¹¦æºæ–‡ä»¶/chap11/chap11_4.m;134;Algorithms_MathModels/ã€ŠMATLABå›¾åƒå¤„ç†ã€‹æºæ–‡ä»¶/æœ¬ä¹¦æºæ–‡ä»¶/chap11/chap11_4.m;;Removed unnecessary comments, Combined subplot and imshow calls, Added titles to subplots, Improved code formatting, Removed redundant figure calls, Overall, these optimizations aim to streamline the code, making it more energy-efficient by reducing unnecessary function calls and improving code readability.;Improved Comments, nan, Improved Plots, Improved Code Readability & Maintainability, nan, Improved Code Readability & Maintainability;Energy-Efficient Clearing, Removed Redundant Comments, Code Structuring, Efficient Figure Management;nan, Improved Comments, Improved Code Readability & Maintainability, Improved Plots;Removed unnecessary `clear all`, Combined assignment of `h`, `s`, and `v`, Removed redundant comments, No changes to the plotting code;Removed Unnecessary Code, Improved Code Efficiency, Improved Comments, No Optimization;Removed unnecessary semicolons at the end of lines., Assigned the figure position and color to variables (`figPos` and `figCol`) to avoid code duplication., Replaced the subplot function calls with a more compact syntax, which improves readability and reduces the number of function calls., Combined the display of original and grayscale images into a single figure, reducing the total number of figures created.;Removed Unnecessary Code, Improved Plots, Improved Code Readability & Maintainability, Improved Plots
1-æ­£ä¾§è§†ï¼Œç‚¹ç›®æ ‡ä»¿çœŸ__CSA_imaging;106.43316192617834;7.06;105.16664326990916;6.6%;108.50335896813196;107.99694366452556;127.98883158365884;99.37576700845383;111.64359181714244;12.27;5.21;1.05;1.74;3.14;1.03;Pack 1;Large;62.64648438;63.5703125;67.39244791666667;66.92473958333333;62.399479166666666;48.70520833333333;92.96692708333332;8.836566666666668;0.29;24.61;12.04;8.863233333333334;8.916633333333333;8.8433;9.290066666666668;8.549833333333334;9.43;sampling/repos_projects_filtered_top100stars/SAR-Synthetic-Aperture-Radar/1-SARæˆåƒç®—æ³•/CSç®—æ³•/1-æ­£ä¾§è§†ï¼Œç‚¹ç›®æ ‡ä»¿çœŸ/CSA_imaging.m;144;SAR-Synthetic-Aperture-Radar/1-SARæˆåƒç®—æ³•/CSç®—æ³•/1-æ­£ä¾§è§†ï¼Œç‚¹ç›®æ ‡ä»¿çœŸ/CSA_imaging.m;;Variable Naming, Code Structure, Optimized Loops, Plotting, Functionality Preservation;Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Indexing & Loops, Improved Plots, No Optimization;;;;;Removed unnecessary variables and calculations to reduce memory usage and improve code readability., Removed redundant comments and code to improve readability and reduce the file size., Simplified the process of generating the point target data by removing the redundant sinc function calculation and directly using the rectangular window method., Removed unused variables to reduce memory usage., Removed unnecessary calculations and simplified the code for generating the distance;Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Efficiency, Improved Memory Management, Removed Unnecessary Code
æ¡ˆä¾‹24 æ¨¡ç³Šç¥žç»ç½‘ç»œçš„é¢„æµ‹ç®—æ³•-å˜‰é™µæ±Ÿæ°´è´¨è¯„ä»·__FuzzyNet;113.21662495937392;13.84;109.4807011921405;12.2%;108.08717447919187;104.94603169774832;107.12447611496512;99.37576700845383;106.2901097614939;6.91;-6.93;0.94;0.50;-1.80;0.98;Pack 2;Large;67.47252604166667;74.24830729166666;55.60351563;74.77174479166666;53.61276041666667;48.70520833333333;91.12369791666669;9.1767;0.63;22.08;12.34;9.0566;8.7699;8.803266666666666;9.163366666666668;8.549833333333334;8.723066666666668;sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/HeuristicAlgorithmï¼ˆè¡¥åˆ†å¯å‘å¼ç®—æ³•ï¼ŒåŒ…æ‹¬ç¥žç»ç½‘ç»œã€æ¨¡æ‹Ÿé€€ç«ã€é—ä¼ ç®—æ³•ï¼‰/ç¥žç»ç½‘ç»œç®—æ³•/MATLABç¥žç»ç½‘ç»œ30ä¸ªæ¡ˆä¾‹åˆ†æž/æ¡ˆä¾‹24 æ¨¡ç³Šç¥žç»ç½‘ç»œçš„é¢„æµ‹ç®—æ³•-å˜‰é™µæ±Ÿæ°´è´¨è¯„ä»·/FuzzyNet.m;294;Algorithms_MathModels/HeuristicAlgorithmï¼ˆè¡¥åˆ†å¯å‘å¼ç®—æ³•ï¼ŒåŒ…æ‹¬ç¥žç»ç½‘ç»œã€æ¨¡æ‹Ÿé€€ç«ã€é—ä¼ ç®—æ³•ï¼‰/ç¥žç»ç½‘ç»œç®—æ³•/MATLABç¥žç»ç½‘ç»œ30ä¸ªæ¡ˆä¾‹åˆ†æž/æ¡ˆä¾‹24 æ¨¡ç³Šç¥žç»ç½‘ç»œçš„é¢„æµ‹ç®—æ³•-å˜‰é™µæ±Ÿæ°´è´¨è¯„ä»·/FuzzyNet.m;;;;;;Vectorization, Reduced memory allocation, Simplified logic;Vectorization, Improved Memory Management, Improved Code Readability & Maintainability;The code provided is already well-structured and follows good programming practices, such as using meaningful variable names and commenting on the code. However, there are a few areas where the code can be optimized to improve energy efficiency and performance., In the code, there are several instances where the same calculations are performed multiple times. For example, the calculation of `u(i,j)` in the `for` loop can be moved outside the loop to avoid redundant calculations. Similarly, the calculation of `w(i)` can be moved outside the loop as well., The code uses nested `for` loops to perform calculations, which can be time-consuming and inefficient. To optimize the code, we can use vectorized operations instead of nested loops. For example, the calculation of `yi(i)` can be performed using vectorized operations, which will significantly improve the performance of the code., The code uses the `zeros` function to initialize several variables, such as `d_p`, `d_b`, and `d_c`. However, these variables are not used in the subsequent calculations, so they can be removed to save memory and improve performance., The code uses the `plot` function to generate plots, which can be time-consuming and inefficient. To optimize the code, we can use the `hold on` command to keep the current plot visible while we add new data to it. This will significantly improve the performance of the code., Finally, the code uses several constants, such as `xite`, `alfa`, `I`, `M`, and `O`, which are not modified in the code. To optimize the code, we can define these constants as global variables, which will reduce the memory usage and improve the performance of the code.;nan, Removed Unnecessary Code, Improved Indexing & Loops, nan, nan, nan
Evaluation__Evaluation_for_Single_Algorithm;213.2359425862009;113.86;216.6759007771888;53.4%;208.54258524580703;126.30216115309936;111.97470448802925;99.37576700845383;214.97593078614057;115.60;1.74;1.01;1.02;6.43;1.03;Pack 2;Large;62.020572916666666;58.75221354166667;63.022526041666666;67.02786458333334;32.006770833333334;48.70520833333333;83.06888020833334;13.731566666666668;5.18;21.97;15.53;14.691833333333333;13.958366666666668;9.9305;8.5699;8.549833333333334;14.438133333333331;sampling/repos_projects_filtered_top100stars/Image-Fusion/General Evaluation Metric/Evaluation/Evaluation_for_Single_Algorithm.m;128;Image-Fusion/General Evaluation Metric/Evaluation/Evaluation_for_Single_Algorithm.m;;Preallocation of Sets, Grayscale Conversion, Code Readability, Excel Writing Optimization, Directory Existence Check, Function Call Optimization;Improved Memory Management, nan, Improved Code Readability & Maintainability, nan, nan, No Optimization;Vectorization and Preallocation, Improved Loop Efficiency, Reduced Redundant Checks, Consolidated Metric Handling, Dynamic Table Creation;Improved Memory Management, nan, Removed Unnecessary Code, nan, nan;Reduced redundant code, Used cell arrays to store sets, Used a single loop to write tables, Removed unnecessary variables, Improved code readability, Reduced number of `writetable` calls, Improved error handling;Removed Unnecessary Code, Improved Indexing & Loops, Improved Indexing & Loops, Removed Unnecessary Code, Improved Code Readability & Maintainability, Improved Code Efficiency, Improved Error Handling;Removed unnecessary comments and spaces for cleaner and more readable code., Removed redundant lines of code, such as defining `m` and `num` separately, and instead combined them into one line., Used the `~` operator instead of `isequal()` for checking if a directory is not equal to `.` or `..`, which is more efficient and easier to read., Combined multiple lines of code that were performing the same operation into one line, such as adding elements to `EN_set`, `SF_set`, etc., Used the `~exist()` function instead of `exist()==0` for checking if a directory does not exist, which is more efficient and easier to read., Removed unnecessary semicolons at the end of lines that were not required, as they do not affect the code's functionality and can make it harder to read.;Improved Comments, nan, nan, nan, nan, nan
sensor-read-example__navego_example_sensor_read;119.10751851391784;19.73;120.7236124674421;16.6%;121.25;129.56457112634283;123.43926289886195;99.37576700845383;128.13984781897162;28.76;9.03;1.08;1.46;6.89;1.06;Pack 2;Medium;64.91197916666667;59.77317708333333;41.99140625;68.92721354166666;68.5640625;48.70520833333333;87.44205729166669;9.483533333333332;0.93;21.13;12.56;8.963266666666666;9.990333333333334;10.123533333333333;9.583466666666666;8.549833333333334;10.4703;sampling/repos_projects_filtered_top100stars/NaveGo/examples/sensor-read-example/navego_example_sensor_read.m;109;NaveGo/examples/sensor-read-example/navego_example_sensor_read.m;;Removed unnecessary functions like `clc`, `close all`, `clear`, and `matlabrc` for energy efficiency as they are not essential for the code execution., Improved code readability by removing excessive comments that do not add value to the understanding of the code., Consolidated the assignment of variables for better code organization., Ensured consistent spacing and formatting for improved readability., Eliminated redundant spaces in array definitions for cleaner code structure., Streamlined the code structure while maintaining functionality for better energy optimization.;nan, Improved Code Readability & Maintainability, nan, Improved Code Readability & Maintainability, nan, nan;Avoid Unnecessary Clearing of Workspace, Remove `matlabrc`, Use Specific Paths, Preallocate Structures, Vectorized Operations;Improved Code Readability & Maintainability, Removed Unnecessary Code, Improved Code Efficiency, Improved Memory Management, Vectorization;Pre-allocation of memory, Struct assignment, Efficient saving of struct;Improved Memory Management, nan, Improved Code Efficiency;Removed unnecessary commands, Used full paths, Used preallocation, Used vectorized operations;Removed Unnecessary Code, nan, Improved Memory Management, Vectorization
IMAè§£å†³éžçº¿æ€§é—®é¢˜æ±‚è§£__main;107.8683400470938;8.49;107.57844441725176;7.9%;124.36990814200448;118.35598704026393;105.75642751063567;99.37576700845383;109.67969258605348;10.30;1.81;1.02;1.21;-14.69;0.88;Pack 2;Medium;66.22291666666666;62.6984375;55.07486979166666;67.70091145833334;54.27578125;48.70520833333333;120.44114583333334;8.969966666666668;0.42;20.21;12.03;8.836466666666666;10.323566666666668;9.623566666666667;8.816533333333332;8.549833333333334;9.403266666666667;sampling/repos_projects_filtered_top100stars/Smart-Algorithm/Immunity_Algorithm/IMAè§£å†³éžçº¿æ€§é—®é¢˜æ±‚è§£/main.m;117;Smart-Algorithm/Immunity_Algorithm/IMAè§£å†³éžçº¿æ€§é—®é¢˜æ±‚è§£/main.m;;Replaced the string representation of the fitness function with an anonymous function to avoid using `eval`, which can be inefficient and potentially unsafe., Preallocated arrays `E_best` and `E_ave` to store fitness values instead of dynamically growing them, which improves memory efficiency., Simplified the sorting process by using `sort` in descending order and directly updating the top clones in the population., Removed unnecessary calculations and redundant operations to streamline the code execution., Enhanced code readability by adding comments and improving variable naming conventions.;nan, Improved Memory Management, nan, nan, Improved Code Readability & Maintainability;Predefined Function Handle, Vectorized Operations, Loop Initialization, Preallocation, Plotting Optimization, Code Simplification;nan, Vectorization, Improved Indexing & Loops, Improved Memory Management, Improved Plots, Improved Code Readability & Maintainability;Pre-allocation of memory, Vectorization, Reducing the number of figure updates, Removing unnecessary code, Simplifying the code;Improved Memory Management, Vectorization, Improved Plots, Removed Unnecessary Code, Improved Code Readability & Maintainability;Preallocation of arrays, Removed redundant variables, Simplified array operations, Removed unnecessary `if` statements, Removed plotting inside the loop, Removed unnecessary `hold off` and `grid on` commands, Renamed variables for clarity, Removed unnecessary semicolons;Improved Memory Management, Removed Unnecessary Code, Improved Code Readability & Maintainability, Removed Unnecessary Code, nan, Removed Unnecessary Code, nan, Removed Unnecessary Code
data__GenerateTrainingPatches;128.65546518949947;29.28;121.7232264200924;22.8%;123.26262868246413;119.71471862802282;122.35228780101365;99.37576700845383;146.68203226718276;47.31;18.03;1.14;1.62;23.42;1.19;Pack 1;Large;64.53789063;56.633854166666666;61.215625;68.35677083333333;36.020833333333336;48.70520833333333;99.44934895833332;10.010200000000001;1.46;20.05;12.85;10.303799999999999;10.0835;10.143633333333332;10.5371;8.549833333333334;11.997399999999999;sampling/repos_projects_filtered_top100stars/DnCNN/TrainingCodes/DnCNN_TrainingCodes_v1.1/data/GenerateTrainingPatches.m;120;DnCNN/TrainingCodes/DnCNN_TrainingCodes_v1.1/data/GenerateTrainingPatches.m;;Replaced the usage of `cat` with square bracket concatenation `[ ]` for `filepaths` array initialization for better performance., Renamed the variable `image` to `image_resized` after resizing to avoid overwriting the original image variable., Removed unnecessary comment lines and unused variables like `name` and `exte`., Improved readability by adding spaces around operators and aligning assignments., Optimized loop variables initialization and conditions for better code readability., Enhanced code consistency by using consistent indentation and spacing throughout the script.;nan, nan, nan, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability;Vectorization and Preallocation, Loop Optimization, File and Directory Handling, Code Readability;Improved Memory Management, Improved Indexing & Loops, nan, Improved Code Readability & Maintainability;Vectorization, Parallel Processing, Reducing Loop Iterations, Pre-allocation, Simplified File Path Concatenation, Removed Unnecessary Variables, Improved Code Readability;Vectorization, Improved Parallel Processing, Improved Indexing & Loops, Improved Memory Management, Improved Code Readability & Maintainability, Removed Unnecessary Code, Improved Code Readability & Maintainability;;
UCI_DataSets__houseL;108.12060445149932;8.74;108.4389572143904;8.1%;114.37622324623128;108.9286331176428;107.92843170160388;99.37576700845383;107.41123606368588;8.04;-0.71;0.99;0.92;-6.96;0.94;Pack 1;Small;56.38359375;74.25494791666667;60.82473958333333;56.99010416666667;58.11393229166666;48.70520833333333;105.31223958333334;8.9899;0.44;19.87;12.03;9.323333333333334;8.823266666666667;9.036700000000002;9.636933333333333;8.549833333333334;9.369966666666667;sampling/repos_projects_filtered_top100stars/bnt/SLP/examples/UCI_DataSets/houseL.m;83;bnt/SLP/examples/UCI_DataSets/houseL.m;;Replaced the deprecated `rand` and `randn` functions with `rng` to set the random seed for reproducibility., Removed the unnecessary `clear house` statement since the variable `house` is not used after loading the data., Used `disp` instead of `size` to only display the size of `app` and `test` matrices, reducing unnecessary output., Reorganized the code for better readability and clarity., Removed the unnecessary `clear houseD` statement as it is not needed at that point in the code and can be left to the end of the script for memory management.;Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Improved Code Readability & Maintainability, Improved Code Efficiency;Loading and Transposing Data, Removing Unnecessary Comments, Efficient Function Usage, Memory Management, Code Readability;nan, Improved Comments, nan, Improved Memory Management, Improved Code Readability & Maintainability;Removed unnecessary `clear` statements, Combined `load` and transpose operations, Removed commented-out code, Improved variable naming, Removed unnecessary `size` function calls, Improved code organization;Removed Unnecessary Code, Improved Code Efficiency, Improved Comments, Improved Code Readability & Maintainability, Removed Unnecessary Code, Improved Code Readability & Maintainability;Preallocate memory for the variables, Load the data and transpose it in one step, Use logical indexing to split the data into training and testing sets, Get the unique values for the specified class in one step, Get the maximum value in the data in one step, Clear the data;Improved Memory Management, nan, Improved Indexing & Loops, nan, nan, nan
å¤šç›®æ ‡æ¨¡ç³Šç»¼åˆè¯„ä»·__main;116.96237436926846;17.59;224.40344085696853;15.0%;241.98812713636627;213.10439961751496;219.51936086012864;99.37576700845383;111.43;12.05;-5.54;0.95;0.69;-130.56;0.46;Pack 1;Small;59.31809895833333;116.8558594;127.48098958333334;136.87161458333333;119.29895833333332;48.70520833333333;106.8699219;9.436733333333333;0.89;19.83;12.39;18.046733333333332;19.00013333333333;17.693133333333336;18.2332;8.549833333333334;10.2036;sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/FuzzyMathematicalModelæ¨¡ç³Šæ•°å­¦æ¨¡åž‹/å¤šç›®æ ‡æ¨¡ç³Šç»¼åˆè¯„ä»·/main.m;142;Algorithms_MathModels/FuzzyMathematicalModelæ¨¡ç³Šæ•°å­¦æ¨¡åž‹/å¤šç›®æ ‡æ¨¡ç³Šç»¼åˆè¯„ä»·/main.m;;Code Readability, Matrix Declaration, Numeric Formatting, Comment Clarity, Function Call;Improved Code Readability & Maintainability, nan, Improved Code Readability & Maintainability, Improved Comments, Improved Code Efficiency;Semicolon Usage, Matrix Definition, Removed Unnecessary Zeros, Inline Comments, Vector Multiplication;Improved Code Readability & Maintainability, nan, Improved Matrix Operations, Improved Comments, nan;Removed the `clc` command, which is not necessary in this code snippet. `clc` clears the command window, but it's not essential for the code's functionality., Removed the leading zeros from the numerical values in the matrix `x`. In Matlab, leading zeros are not necessary for numerical values, and they can make the code harder to read., Replaced the matrix multiplication operator `*` with the array multiplication operator `.*` is not necessary in this case, since matrix multiplication is the correct operation for this scenario.;Removed Unnecessary Code, Improved Matrix Operations, Improved Matrix Operations;Preallocation of memory, Calculating `r` in a loop;Improved Memory Management, nan
é™„ä»¶__account4;106.89165242520976;7.52;107.80224304196504;7.0%;174.67340138761793;110.04888559970422;107.55359954831462;99.37576700845383;115.21317850743266;15.84;8.32;1.08;2.11;-59.46;0.66;Pack 2;Medium;60.1015625;73.63098958333333;48.87786458333333;73.50872395833333;63.991276041666666;48.70520833333333;90.97955729166668;8.936533333333333;0.39;19.44;11.96;8.9566;8.943333333333333;8.7433;9.27;8.549833333333334;10.143533333333332;sampling/repos_projects_filtered_top100stars/Math_Model/2-1å›½èµ›é¢˜ç›®+è®ºæ–‡/2012/B077/é™„ä»¶/é™„ä»¶/account4.m;113;Math_Model/2-1å›½èµ›é¢˜ç›®+è®ºæ–‡/2012/B077/é™„ä»¶/é™„ä»¶/account4.m;;Preallocation, Vectorization, Code Readability, Efficient Indexing, Optimized Logic;Improved Memory Management, Vectorization, Improved Code Readability & Maintainability, Improved Indexing & Loops, No Manual Inspection;Vectorization, Pre-allocation, Logical Indexing, Simplified Loop, Reduced Redundant Calculations;Vectorization, Improved Memory Management, Improved Indexing & Loops, Improved Indexing & Loops, Removed Unnecessary Code;Vectorization, Matrix operations, Removed unnecessary variables, Simplified conditional statements, Removed redundant calculations;Vectorization, Improved Matrix Operations, Removed Unnecessary Code, Improved Code Readability & Maintainability, Removed Unnecessary Code;"The for-loop to calculate `omegat` and `omegap` is removed by directly calculating them using vectorized operations., The for-loop to calculate `data4` and `data5` is removed by using vectorized operations., The code `data5(find(data5<80))=0;` is replaced with `data5 = max(data4, 80);` to avoid the use of `find` function and to simplify the code., The if-else conditions to calculate `nian` are removed and replaced with a single line of code `nian = price / g;` to simplify the code.";Vectorization, Vectorization, nan, nan
main__gen_class_info_cityscapes;114.2567682902484;14.88;106.92186787916192;13.0%;109.91458587650752;108.4177993774356;106.45764719645764;99.37576700845383;114.0716491698986;14.70;-0.19;1.00;0.99;4.16;1.04;Pack 1;Small;49.15091145833333;78.59960938;65.79283854166667;68.20416666666667;65.86940104166666;48.70520833333333;128.7421875;9.316766666666666;0.77;19.40;12.26;9.156633333333332;9.0633;9.083333333333334;9.03;8.549833333333334;9.8702;sampling/repos_projects_filtered_top100stars/refinenet/main/gen_class_info_cityscapes.m;87;refinenet/main/gen_class_info_cityscapes.m;;Combined Variable Assignments, Reduced Lines, Direct Conversion, Efficient Loading, Enhanced Readability;No Manual Inspection, Removed Unnecessary Code, nan, No Manual Inspection, Improved Code Readability & Maintainability;Initialization with `struct()`, Selective Loading, Direct Conversion;No Manual Inspection, Improved Code Efficiency, nan;Pre-allocation of struct, Vectorized assignment, Removed unnecessary variables, Improved readability;Improved Memory Management, Vectorization, Removed Unnecessary Code, Improved Code Readability & Maintainability;Removed the initialization of the empty cell array `class_info` since it is not necessary., Combined the initialization of `class_names` and `class_label_values` into a single line., Removed the intermediate variable `cmap` and directly assigned the loaded colormap to `class_info.mask_cmap`., Removed the intermediate variable `class_label_values` and directly assigned the uint8 array to `class_info.class_label_values`., Removed the intermediate variable `cmap` and directly assigned the uint8 array to `class_info.mask_cmap`.;nan, nan, Improved Code Efficiency, nan, Removed Unnecessary Code
minimumWork__MAIN_cstWork;161.1848434449775;61.81;138.03000539145432;38.3%;137.2502944945319;111.74872029614636;112.13625793463628;99.37576700845383;144.7590942383899;45.38;-16.43;0.90;0.73;7.51;1.05;Pack 1;Large;54.97070313;49.96367188;68.12708333333333;68.24140625;64.37929688;48.70520833333333;99.28697916666668;11.884;3.33;18.54;13.56;10.723833333333333;11.170666666666666;9.850266666666666;9.603733333333334;8.549833333333334;11.810533333333332;sampling/repos_projects_filtered_top100stars/OptimTraj/demo/minimumWork/MAIN_cstWork.m;86;OptimTraj/demo/minimumWork/MAIN_cstWork.m;;Minimize Redundant Comments, Optimize Plotting, Code Structure;Improved Comments, Improved Plots, Improved Code Readability & Maintainability;Inlined Function Calls, Whitespace and Formatting, Vectorization, Conciseness, Clarity;Improved Code Efficiency, Improved Code Readability & Maintainability, Vectorization, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability;Removed unnecessary parentheses, Used `optimoptions` instead of `optimset`, Simplified bounds definition, Removed redundant comments, Used consistent spacing, Removed unnecessary semicolons;Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Comments, Improved Code Readability & Maintainability, Removed Unnecessary Code;Disabled automatic gradient check in fmincon, Reduced the number of grid points, Reduced the accuracy requirement;Improved Code Efficiency, Improved Code Efficiency, Others
Quaternions__TestScript;115.48298848472186;16.11;123.54150238033034;13.9%;119.48334503179647;130.9209142049891;118.6245162962994;99.37576700845383;123.8747406007334;24.50;8.39;1.07;1.52;4.39;1.04;Pack 2;Medium;53.73645833333333;64.63580729166667;61.67434895833333;77.2265625;60.57591145833333;48.70520833333333;105.99622395833332;9.483466666666667;0.93;17.25;12.18;10.2904;9.963566666666667;10.097;9.850166666666667;8.549833333333334;10.3034;sampling/repos_projects_filtered_top100stars/Gait-Tracking-With-x-IMU/Gait Tracking With x-IMU/Quaternions/TestScript.m;119;Gait-Tracking-With-x-IMU/Gait Tracking With x-IMU/Quaternions/TestScript.m;;Reduced Code Duplication, Improved Modularity, Enhanced Readability, Optimized Functionality;Removed Unnecessary Code, nan, Improved Code Readability & Maintainability, No Manual Inspection;Consolidation of `sprintf` Calls, Usage of `disp` with Concatenation, Avoiding Redundant Variable Declarations;No Manual Inspection, nan, nan;Simplified axis normalization, Replaced `sprintf` and `disp` with `fprintf`, Removed unnecessary variables, Used transpose operator (`'`) instead of `R(1,, Removed redundant `strcat` operations;Improved Code Readability & Maintainability, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Removed Unnecessary Code;The original code has a lot of repetition in the display functions. By defining these functions once and reusing them, we can reduce the amount of code and make it more readable., The original code calculates the norm of the axis vector twice. By calculating it once and storing it in a variable, we can avoid this redundant calculation., The original code defines the axis-angle to rotation matrix conversion as a separate function. However, this conversion can be done in a single line using the Rodriguez rotation formula. By defining this formula as a function handle, we can avoid the need for a separate function., The original code defines the quaternion to rotation matrix conversion as a separate function. However, this conversion can be done in a single line using the quaternion multiplication formula. By defining this formula as a function handle, we can avoid the need for a separate function., The original code defines the rotation matrix to quaternion conversion as a separate function. However, this conversion can be done in a single line using the quaternion normalization formula. By defining this formula as a function handle, we can avoid the need for a separate function., The original code defines the rotation matrix to ZYX Euler angles conversion as a separate function. However, this conversion can be done in a single line using the Euler angle formulas. By defining these formulas as a function handle, we can avoid the need for a separate function., The original code defines the quaternion to ZYX Euler angles conversion as a separate function. However, this conversion can be done by first converting the quaternion to a rotation matrix and then converting the rotation matrix to Euler angles. By defining this conversion as a function handle, we can avoid the need for a separate function., The original code defines the ZYX Euler angles to rotation matrix conversion as a separate function. However, this conversion can be done in a single line using the Euler angle formulas. By defining these formulas as a function handle, we can avoid the need for a separate function.;nan, Removed Unnecessary Code, nan, nan, nan, nan, nan, nan
fiveLinkBiped__TEST_drawRobot;138.76814676921543;39.39;139.85323994949383;28.4%;156.1628875733334;138.32572784434305;140.05680287683694;99.37576700845383;141.83324635815808;42.46;3.07;1.02;1.08;-14.33;0.91;Pack 2;Small;65.45885416666667;37.11549479166667;55.39804688;87.56041666666668;52.702473958333336;48.70520833333333;117.9601563;10.997233333333334;2.45;16.10;12.62;10.963899999999999;11.657366666666668;10.783833333333334;11.4906;8.549833333333334;11.343866666666669;sampling/repos_projects_filtered_top100stars/OptimTraj/demo/fiveLinkBiped/TEST_drawRobot.m;90;OptimTraj/demo/fiveLinkBiped/TEST_drawRobot.m;;Remove Unnecessary Comments, Avoid Unnecessary Function Calls, No significant energy optimization can be done in this code as it is already concise and efficient.;Improved Comments, No Manual Inspection, No Optimization;Comment Consolidation, Figure Creation;Improved Comments, Improved Plots;Combined `clc` and `clear` into one command, Removed unnecessary ellipsis;Improved Code Efficiency, Removed Unnecessary Code;Preallocation of figure and axes, Deleting figure and axes handles, Avoiding unnecessary figure updates;Improved Memory Management, Improved Plots, Improved Plots
other__init_workspace;130.26599884041158;30.89;133.26817626956617;23.7%;143.20967305502077;124.6196390788168;121.51274058023894;99.37576700845383;132.91934967029374;33.54;2.65;1.02;1.09;-10.29;0.93;Pack 2;Small;49.54088541666667;44.68059895833333;54.028385416666666;50.04635416666667;70.80729166666667;48.70520833333333;98.15507813;10.503766666666666;1.95;15.81;12.40;10.630233333333333;10.6372;10.823833333333335;9.976899999999999;8.549833333333334;10.2902;sampling/repos_projects_filtered_top100stars/OpenTLD/other/init_workspace.m;75;OpenTLD/other/init_workspace.m;;Beep Off, Clear Command and Figure Windows, Clear Specific Variables, Turn Off Warnings, Set Random Number Generator State, Add Current and Subdirectories to Path, Start Timer;Others, Removed Unnecessary Code, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Others, Others;Combine `rand` and `randn` State Initialization, Specific Warning Control;Improved Code Efficiency, Improved Code Efficiency;Consolidated warning and clear commands, Combined random number generator state setting, Removed unnecessary commands, Improved code readability;No Manual Inspection, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Readability & Maintainability;Preallocate memory for the `tld` variable, Clear the global workspace and turn off warnings, Initialize random number generators, Close all figures and clear the command window, Add the current directory and its subdirectories to the MATLAB path, Start the timer;Improved Memory Management, nan, nan, Improved Plots, nan, nan
Constant Modulus__CE_similarity_bb_ARS;153.4132308960834;54.04;155.75050710048333;35.2%;167.70623982746037;122.78887125650266;147.89787801106965;99.37576700845383;158.1394734701297;58.76;4.73;1.03;1.09;-9.57;0.94;Pack 1;Large;42.10390625;30.938151041666668;68.53645833333333;65.96992188;53.53984375;48.70520833333333;82.02174479166666;12.150833333333335;3.60;15.01;12.63;12.304233333333334;12.791133333333331;10.103566666666667;12.370966666666668;8.549833333333334;12.991133333333332;sampling/repos_projects_filtered_top100stars/Must-Reading-on-ISAC/Codes/Fan2018TSP/Codes for DFRC Waveform Design/Constant Modulus/CE_similarity_bb_ARS.m;153;Must-Reading-on-ISAC/Codes/Fan2018TSP/Codes for DFRC Waveform Design/Constant Modulus/CE_similarity_bb_ARS.m;;Replaced 'j' with '1i' for complex numbers to improve readability and maintain consistency with Matlab syntax., Preallocated the matrix `X0` to avoid dynamic resizing within the loop, which improves performance., Removed unnecessary commented-out code to reduce clutter and improve code readability., Simplified the initialization of `l` and `u` arrays to directly calculate the values without unnecessary loops., Removed redundant variable assignments and unnecessary intermediate variables to streamline the code., Combined multiple sequential assignments into a single line to enhance code compactness., Improved code formatting for better readability and maintainability., Used element-wise operations where applicable to enhance code clarity and potentially improve performance., Reorganized the code structure to group related operations together for better understanding.;Improved Code Readability & Maintainability, Improved Memory Management, Improved Code Readability & Maintainability, Improved Indexing & Loops, Removed Unnecessary Code, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Efficiency, Improved Code Readability & Maintainability;Avoiding `clear all` and `clc`, Vectorization, Preallocation, Removing Redundant Computations, Complex Number Handling, Efficient Loop Handling;No Manual Inspection, Vectorization, Improved Memory Management, Removed Unnecessary Code, Improved Matrix Operations, Improved Indexing & Loops;Vectorization, Pre-allocation, Reducing redundant computations, Simplification of indexing, Removal of unnecessary variables;Vectorization, Improved Memory Management, Removed Unnecessary Code, Improved Indexing & Loops, Removed Unnecessary Code;Removed the unnecessary `clear all` and `close all` commands to save memory and time. The `clc` command is kept as it helps to clear the command window., Moved the initialization of `X0` outside of the loop to avoid unnecessary re-initialization., Combined the two loops for initializing `l` and `u` into one loop to save computation time., Combined the two loops for initializing `A` into one loop to save computation time., Removed the `warning off` command to avoid suppressing any potential warnings that might indicate issues with the code., Removed the commented out code to save space and improve readability., Removed the unused variables `timer2` and `timer3` to save memory and improve readability., Removed the unused variable `elp` to save memory and improve readability., Removed the unused variable `max_iternum` to save memory and improve readability., Removed the unused variable `convergence` to save memory and improve readability., Removed the unused variable `timer_tot` to save memory and improve readability., Removed the unused variable `cd` to save memory and improve readability., Removed the unused variable `tr` to save memory and improve readability., Removed the unused variable `xchild_left_ub` to save memory and improve readability., Removed the unused variable `xchild_right_lb` to save memory and improve readability., Removed the unused variable `xchild_right_ub` to save memory and improve readability., Removed the unused variable `x_abs` to save memory and improve readability., Removed the unused variable `x_cplx` to save memory and improve readability., Removed the unused variable `x_nml3_cplx` to save memory and improve readability., Removed the unused variable `x_nml3` to save memory and improve readability., Removed the unused variable `x_opt` to save memory and improve readability., Removed the unused variable `y_rc` to save memory and improve readability., Removed the unused variable `inf_norm` to save memory and improve readability., Removed the unused variable `lb_seq` to save memory and improve readability., Removed the unused variable `ub_seq` to save memory and improve readability., Removed the unused variable `final_lb` to save memory and improve readability., Removed the unused variable `final_ub` to save memory and improve readability., Removed the unused variable `epsl1` to save memory and improve readability., Removed the unused variable `epsl` to save memory and improve readability., Removed the unused variable `ee` to save memory and improve readability., Removed the unused variable `delta` to save memory and improve readability., Removed the unused variable `l` to save memory and improve readability., Removed the unused variable `u` to save memory and improve readability., Removed the unused variable `A` to save memory and improve readability., Removed the unused variable `amp` to save memory and improve readability., Removed the unused variable `power` to save memory and improve readability., Removed the unused variable `N_pbits` to save memory and improve readability., Removed the unused variable `msg_bits` to save memory and improve readability., Removed the unused variable `y` to save memory and improve readability., Removed the unused variable `y_wave` to save memory and improve readability., Removed the unused variable `H` to save memory and improve readability., Removed the unused variable `H_wave` to save memory and improve readability., Removed the unused variable `x0` to save memory and improve readability., Removed the unused variable `x0_wave` to save memory and improve readability., Removed the unused variable `prob_list` to save memory and improve readability., Removed the unused variable `used` to save memory and improve readability., Removed the unused variable `lbest` to save memory and improve readability., Removed the unused variable `ubest` to save memory and improve readability., Removed the unused variable `LB_start` to save memory and improve readability., Removed the unused variable `UB_start` to save memory and improve readability., Removed the unused variable `iter` to save memory and improve readability., Removed the unused variable `con` to save memory and improve readability., Removed the unused variable `max_iternum` to save memory and improve readability., Removed the unused variable `epsl` to save memory and improve readability., Removed the unused variable `epsl1` to save memory and improve readability., Removed the unused variable `cd` to save memory and improve readability., Removed the unused variable `tr` to save memory and improve readability., Removed the unused variable `xchild_left_ub` to save memory and improve readability., Removed the unused variable `xchild_right_lb` to save memory and improve readability., Removed the unused variable `xchild_right_ub` to save memory and improve readability., Removed the unused variable `x_abs` to save memory and improve readability., Removed the unused variable `x_cplx` to save memory and improve readability., Removed the unused variable `x_nml3_cplx` to save memory and improve readability., Removed the unused variable `x_nml3` to save memory and improve readability., Removed the unused variable `x_opt` to save memory and improve readability., Removed the unused variable `y_rc` to save memory and improve readability., Removed the unused variable `inf_norm` to save memory and improve readability., Removed the unused variable `elp` to save memory and improve readability., Removed the unused variable `lb_seq` to save memory and improve readability., Removed the unused variable `ub_seq` to save memory and improve readability., Removed the unused variable `final_lb` to save memory and improve readability., Removed the unused variable `final_ub` to save memory and improve readability., Removed the unused variable `epsl1` to save memory and improve readability., Removed the unused variable `epsl` to save memory and improve readability., Removed the unused variable `ee` to save memory and improve readability., Removed the unused variable `delta` to save memory and improve readability., Removed the unused variable `l` to save memory and improve readability., Removed the unused variable `u` to save memory and improve readability., Removed the unused variable `A` to save memory and improve readability., Removed the unused variable `amp` to save memory and improve readability., Removed the unused variable `power` to save memory and improve readability., Removed the unused variable `N_pbits` to save memory and improve readability., Removed the unused variable `msg_bits` to save memory and improve readability., Removed the unused variable `y` to save memory and improve readability., Removed the unused variable `y_wave` to save memory and improve readability., Removed the unused variable `H` to save memory and improve readability., Removed the unused variable `H_wave` to save memory and improve readability., Removed the unused variable `x0` to save memory and improve readability., Removed the unused variable `x0_wave` to save memory and improve readability., Removed the unused variable `prob_list` to save memory and improve readability., Removed the unused variable `used` to save memory and improve readability., Removed the unused variable `lbest` to save memory and improve readability., Removed the unused variable `ubest` to save memory and improve readability., Removed the unused variable `LB_start` to save memory and improve readability., Removed the unused variable `UB_start` to save memory and improve readability., Removed the unused variable `iter` to save memory and improve readability., Removed the unused variable `con` to save memory and improve readability., Removed the unused variable `max_iternum` to save memory and improve readability., Removed the unused variable `epsl` to save memory and improve readability., Removed the unused variable `epsl1` to save memory and improve readability., Removed the unused variable `cd` to save memory and improve readability., Removed the unused variable `tr` to save memory and improve readability., Removed the unused variable `xchild_left_ub` to save memory and improve readability., Removed the unused variable `xchild_right_lb` to save memory and improve readability., Removed the unused variable `xchild_right_ub` to save memory and improve readability., Removed the unused variable `x_abs` to save memory and improve readability., Removed the unused variable `x_cplx` to save memory and improve readability., Removed the unused variable `x_nml3_cplx` to save memory and improve readability., Removed the unused variable `x_nml3` to save memory and improve readability., Removed the unused variable `x_opt` to save memory and improve readability., Removed the unused variable `y_rc` to save memory and improve readability., Removed the unused variable `inf_norm` to save memory and improve readability., Removed the unused variable `elp` to save memory and improve readability., Removed the unused variable `lb_seq` to save memory and improve readability., Removed the unused variable `ub_seq` to save memory and improve readability., Removed the unused variable `final_lb` to save memory and improve readability., Removed the unused variable `final_ub` to save memory and improve readability., Removed the unused variable `epsl1` to save memory and improve readability., Removed the unused variable `epsl` to save memory and improve readability., Removed the unused variable `ee` to save memory and improve readability., Removed the unused variable `delta` to save memory and improve readability., Removed the unused variable `l` to save memory and improve readability., Removed the unused variable `u` to save memory and improve readability., Removed the unused variable `A` to save memory and improve readability., Removed the unused variable `amp` to save memory and improve readability., Removed the unused variable `power` to save memory and improve readability., Removed the unused variable `N_pbits` to save memory and improve readability., Removed the unused variable `msg_bits` to save memory and improve readability., Removed the unused variable `y` to save memory and improve readability., Removed the unused variable `y_wave` to save memory and improve readability., Removed the unused variable `H` to save memory and improve readability., Removed the unused variable `H_wave` to save memory and improve readability., Removed the unused variable `x0` to save memory and improve readability., Removed the unused variable `x0_wave` to save memory and improve readability., Removed the unused variable `prob_list` to save memory and improve readability., Removed the unused variable `used` to save memory and improve readability., Removed the unused variable `lbest` to save memory and improve readability., Removed the unused variable `ubest` to save memory and improve readability., Removed the unused variable `LB_start` to save memory and improve readability., Removed the unused variable `UB_start` to save memory and improve readability., Removed the unused variable `iter` to save memory and improve readability., Removed the unused variable `con` to save memory and improve readability., Removed the unused variable `max_iternum` to save memory and improve readability., Removed the unused variable `epsl` to save memory and improve readability., Removed the unused variable `epsl1` to save memory and improve readability., Removed the unused variable `cd` to save memory and improve readability., Removed the unused variable `tr` to save memory and improve readability., Removed the unused variable `xchild_left_ub` to save memory and improve readability., Removed the unused variable `xchild_right_lb` to save memory and improve readability., Removed the unused variable `xchild_right_ub` to save memory and improve readability., Removed the unused variable `x_abs` to save memory and improve readability., Removed the unused variable `x_cplx` to save memory and improve readability., Removed the unused variable `x_nml3_cplx` to save memory and improve readability., Removed the unused variable `x_nml3` to save memory and improve readability., Removed the unused variable `x_opt` to save memory and improve readability., Removed the unused variable `y_rc` to save memory and improve readability., Removed the unused variable `inf_norm` to save memory and improve readability., Removed the unused variable `elp` to save memory and improve readability., Removed the unused variable `lb_seq` to save memory and improve readability., Removed the unused variable `ub_seq` to save memory and improve readability., Removed the unused variable `final_lb` to save memory and improve readability., Removed the unused variable `final_ub` to save memory and improve readability., Removed the unused variable `epsl1` to save memory and improve readability., Removed the unused variable `epsl` to save memory and improve readability., Removed the unused variable `ee` to save memory and improve readability., Removed the unused variable `delta` to save memory and improve readability., Removed the unused variable `l` to save memory and improve readability., Removed the unused variable `u` to save memory and improve readability., Removed the unused variable `A` to save memory and improve readability., Removed the unused variable `amp` to save memory and improve readability., Removed the unused variable `power` to save memory and improve readability., Removed the unused variable `N_pbits` to save memory and improve readability., Removed the unused variable `msg_bits` to save memory and improve readability., Removed the unused variable `y` to save memory and improve readability., Removed the unused variable `y_wave` to save memory and improve readability., Removed the unused variable `H` to save memory and improve readability., Removed the unused variable `H_wave` to save memory and improve readability., Removed the unused variable `x0` to save memory and improve readability., Removed the unused variable `x0_wave` to save memory and improve readability., Removed the unused variable `prob_list` to save memory and improve readability., Removed the unused variable `used` to save memory and improve readability., Removed the unused variable `lbest` to save memory and improve readability., Removed the unused variable `ubest` to save memory and improve readability., Removed the unused variable `LB_start` to save memory and improve readability., Removed the unused variable `UB_start` to save memory and improve readability., Removed the unused variable `iter` to save memory and improve readability., Removed the unused variable `con` to save memory and improve readability., Removed the unused variable `max_iternum` to save memory and improve readability., Removed the unused variable `epsl` to save memory and improve readability., Removed the unused variable `epsl1` to save memory and improve readability., Removed the unused variable `cd` to save memory and improve readability., Removed the unused variable `tr` to save memory and improve readability., Removed the unused variable `xchild_left_ub` to save memory and improve readability., Removed the unused variable `xchild_right_lb` to save memory and improve readability., Removed the unused variable `xchild_right_ub` to save memory and improve readability., Removed the unused variable `x_abs` to save memory and improve readability., Removed the unused variable `x_cplx` to save memory and improve readability., Removed the unused variable `x_nml3_cplx` to save memory and improve readability., Removed the unused variable `x_nml3` to save memory and improve readability., Removed the unused variable `x_opt` to save memory and improve readability., Removed the unused variable `y_rc` to save memory and improve readability., Removed the unused variable `inf_norm` to save memory and improve readability., Removed the unused variable `elp` to save memory and improve readability., Removed the unused variable `lb_seq` to save memory and improve readability., Removed the unused variable `ub_seq` to save memory and improve readability., Removed the unused variable `final_lb` to save memory and improve readability., Removed the unused variable `final_ub`;Removed Unnecessary Code, Improved Indexing & Loops, Improved Indexing & Loops, Improved Indexing & Loops, Removed Unnecessary Code, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Removed Unnecessary Code
mlclass-ex8__loadMovieList;109.92262369785652;10.55;210.27622019442495;9.6%;211.48;228.58723195397175;207.4941864013827;99.37576700845383;122.63541564948392;23.26;12.71;1.12;2.21;-88.85;0.58;Pack 1;Small;65.11315104166667;120.79544270833334;129.7699219;102.7164063;161.61770833333333;48.70520833333333;91.79114583333332;9.2635;0.71;14.78;11.87;17.679633333333335;17.966533333333334;17.9733;17.2465;8.549833333333334;10.710266666666666;sampling/repos_projects_filtered_top100stars/Stanford-Machine-Learning-Course/Anomaly Detection and Recommender Systems/mlclass-ex8/loadMovieList.m;147;Stanford-Machine-Learning-Course/Anomaly Detection and Recommender Systems/mlclass-ex8/loadMovieList.m;;Changed the function name to follow the MATLAB naming convention (camelCase)., Replaced `fgets` with `fgetl` for reading lines from the file, as `fgets` includes newline characters which are unnecessary in this context., Removed the unnecessary `idx` variable assignment as it is not being used., Improved the readability of the code by using a tilde (~) to ignore the first output of `strtok`., By making these changes, the code is now more concise and efficient for reading and storing the movie list, thus enhancing energy efficiency.;nan, nan, Removed Unnecessary Code, Improved Code Readability & Maintainability, nan;Error Handling, Using `textscan`, Simplifying String Processing, Removing Unnecessary Comments;Improved Error Handling, Improved Code Efficiency, Improved Code Readability & Maintainability, Improved Comments;Textscan instead of fgets and strtok, Vectorized operation, Reducing memory allocation, Removing unnecessary variables, Simplified code;Improved Code Efficiency, Vectorization, Improved Memory Management, Removed Unnecessary Code, Improved Code Readability & Maintainability;Preallocation of memory, Reading all lines at once, Vectorized operations, Reduced number of function calls, Simplified code;Improved Memory Management, No Manual Inspection, Vectorization, No Manual Inspection, Improved Code Readability & Maintainability
3D_ICP-master__icp_test;146.55657348634364;47.18;150.0870203653079;32.2%;147.09;151.17790629065323;142.6562032064481;99.37576700845383;253.6082397458454;154.23;107.05;1.73;3.27;106.51;1.72;Pack 1;Medium;52.58971354166667;59.50963541666667;40.30247395833333;18.0421875;71.84648438;48.70520833333333;217.91080729166663;11.7507;3.20;14.74;12.47;11.917399999999999;11.477366666666668;11.544033333333333;11.997433333333332;8.549833333333334;21.12043333333333;sampling/repos_projects_filtered_top100stars/2DASL/evaluation/3D_ICP-master/icp_test.m;86;2DASL/evaluation/3D_ICP-master/icp_test.m;;Code Refactoring, Reduced Redundant Load Operations, Reduced Redundant Plotting, Efficient Looping;Improved Code Readability & Maintainability, Removed Unnecessary Code, nan, Improved Indexing & Loops;String Concatenation with `[]`, Initial `last_error` Assignment, Order of Updates in the Loop, Commented Code;Improved Code Efficiency, nan, nan, nan;Removed unnecessary commented code, Improved variable initialization, No other changes were necessary;Removed Unnecessary Code, Improved Code Efficiency, No Optimization;Removed unnecessary variable initialization, Moved the increment of `cnt` inside the while loop, Updated the `last_error` and `last_R` variables inside the while loop, Moved the `disp(R)` inside the while loop;Removed Unnecessary Code, nan, nan, nan
example1__example1;104.56055450444498;5.18;106.2000539144986;5.0%;112.48089752194744;104.28135681153702;104.0307225545228;99.37576700845383;107.55440826405926;8.18;2.99;1.03;1.58;-4.93;0.96;Pack 1;Medium;43.47291666666667;56.92643229166666;56.27721354166667;54.74778645833333;64.69492188;48.70520833333333;116.7363281;8.903333333333334;0.35;14.67;11.74;8.7565;8.849933333333333;9.069933333333333;8.5298;8.549833333333334;8.789666666666665;sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/MATLABæ™ºèƒ½ç®—æ³•30ä¸ªæ¡ˆä¾‹åˆ†æž/chapter18 åŸºäºŽé±¼ç¾¤ç®—æ³•çš„å‡½æ•°å¯»ä¼˜ç®—æ³•/example1/example1.m;172;Algorithms_MathModels/MATLABæ™ºèƒ½ç®—æ³•30ä¸ªæ¡ˆä¾‹åˆ†æž/chapter18 åŸºäºŽé±¼ç¾¤ç®—æ³•çš„å‡½æ•°å¯»ä¼˜ç®—æ³•/example1/example1.m;;Removed unnecessary commands like `clc` and `tic` for energy efficiency., Replaced `repmat` with `repelem` for generating LBUB matrix efficiently., Removed redundant plotting commands within the loop to reduce unnecessary computations., Improved variable naming for better code readability., Streamlined the code structure for better organization and understanding.;nan, nan, nan, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability;Memory Preallocation, Loop Initialization, Vectorization, Redundant Plot Calls, Code Clarity, Removed Unnecessary Commands;Improved Memory Management, Improved Indexing & Loops, Vectorization, Improved Plots, Improved Code Readability & Maintainability, Removed Unnecessary Code;Removed unnecessary semicolons, Improved matrix operations, Pre-allocated memory, Removed redundant code, Improved variable naming, Removed unnecessary comments, Improved code organization, Used vectorized operations;Removed Unnecessary Code, Improved Matrix Operations, Improved Memory Management, Removed Unnecessary Code, Improved Code Readability & Maintainability, Improved Comments, Improved Code Readability & Maintainability, Vectorization;Removed the `hold on` command from the initial plotting, as it's not necessary in this case., Combined the initialization of `LBUB` into a single line using `repmat` to improve readability and reduce redundancy., Moved the `tic` command to the beginning of the script to ensure accurate timing of the entire code execution., Removed the `ezplot` function from the main loop to avoid unnecessary re-plotting, which can be computationally expensive., Consolidated the initialization of `bestx` and `besty` into a single line., Simplified the plotting commands for better readability., Removed the semicolons at the end of the `disp` commands to ensure that the output is displayed., Moved the `toc` command to the end of the script to measure the total execution time.;nan, Improved Code Readability & Maintainability, nan, nan, nan, Improved Code Readability & Maintainability, nan, nan
EMPlanner_v0.1__emplanner_init;155.48139241537427;56.11;147.59596557615052;36.1%;163.4139190672664;154.33144378665213;156.73648630779934;99.37576700845383;162.91674855553234;63.54;7.44;1.05;1.13;-0.50;1.00;Pack 2;Medium;64.25325520833333;65.09895833333333;55.19257813;52.204166666666666;49.77369791666667;48.70520833333333;62.02265625;12.397466666666666;3.85;14.58;12.54;11.1105;12.150799999999998;11.770733333333334;12.06413333333333;8.549833333333334;13.0175;sampling/repos_projects_filtered_top100stars/automatic-driving-decision-and-planning-for-matlab/EMPlanner_v0.1/emplanner_init.m;127;automatic-driving-decision-and-planning-for-matlab/EMPlanner_v0.1/emplanner_init.m;;Replaced manual creation of arrays for `right_wheel_ground` and `rack_displacement` with vectorized approach for better readability and efficiency., Removed unnecessary comments and excessive whitespace to improve code clarity., Used vectorization in the loop for `vx_break_point` initialization to enhance performance., Optimized the loop for LQR offline calculations by preallocating the `k` matrix and using vectorized operations for better efficiency.;Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Vectorization, Vectorization;Vectorization, Preallocation, Loop Optimization, Avoiding Repetitive Calculations, Matrix Initialization;Vectorization, Improved Memory Management, Improved Indexing & Loops, No Manual Inspection, Improved Matrix Operations;Vectorization, Pre-allocation, Matrix operations, Code organization, Variable naming, Comments;Vectorization, Improved Memory Management, Improved Matrix Operations, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Comments;The mapping relationship between steering angle and steering wheel angle is simplified using the colon operator to generate the vectors, which reduces code length and improves readability., The vector `vx_break_point` is generated using the colon operator, which simplifies the code and improves readability., The matrix `A` and `B` are defined using the colon operator, which simplifies the code and improves readability., The loop variable `i` is used to access the elements of the vector `vx_break_point` directly, which eliminates the need to create a new variable for each iteration and improves code efficiency., The LQR gains `LQR_K1`, `LQR_K2`, `LQR_K3`, and `LQR_K4` are calculated using matrix operations, which simplifies the code and improves efficiency., The initial position of the vehicle is defined using the variables `host_x_init` and `host_y_init`, which improves code readability and maintainability.;Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, nan, nan, Improved Code Readability & Maintainability
UCI_DataSets__mushroomsL;109.70190429695069;10.33;111.06805318199912;9.4%;108.8056172688026;141.04164174405352;106.72510121670008;99.37576700845383;107.88009440114256;8.50;-1.82;0.98;0.82;-0.93;0.99;Pack 1;Medium;66.8796875;74.66614583333333;70.32265625;59.00143229166667;55.11679688;48.70520833333333;87.67682291666668;9.2834;0.73;14.08;11.82;9.476766666666666;8.956733333333334;10.456966666666666;9.249966666666667;8.549833333333334;8.929833333333335;sampling/repos_projects_filtered_top100stars/bnt/SLP/examples/UCI_DataSets/mushroomsL.m;87;bnt/SLP/examples/UCI_DataSets/mushroomsL.m;;Avoid unnecessary operations, Optimized unique value conversion, Efficient data splitting, Code readability, Memory management;No Manual Inspection, nan, No Manual Inspection, Improved Code Readability & Maintainability, Improved Memory Management;Vectorization, Memory Management, Logical Indexing, Matrix Operations;Vectorization, Improved Memory Management, Improved Indexing & Loops, Improved Matrix Operations;Reduced loop iterations, Removed redundant operations, Improved memory allocation, Simplified variable names, Removed redundant clear statements;Improved Indexing & Loops, Removed Unnecessary Code, Improved Memory Management, Improved Code Readability & Maintainability, Removed Unnecessary Code;Preallocate memory for `mushrooms_optimized` to avoid resizing the array during the loop, which can be computationally expensive., Replace nested loops with a single loop over each row, which reduces the number of iterations and improves performance., Use logical indexing instead of the `find` function to avoid creating temporary arrays, which can save memory and improve performance., Remove single value columns before splitting the data into training and testing sets, which reduces the size of the data and improves performance., Use the built-in `unique` function instead of custom code to find unique values in the class column, which can be more efficient and easier to maintain.;Improved Memory Management, Improved Indexing & Loops, Improved Indexing & Loops, nan, nan
004_Data regression prediction based on support vector machine (libsvm)__main;121.70870971675612;22.33;132.12234141028603;18.3%;129.21459808351162;127.38360850024812;130.38244527190497;99.37576700845383;110.74143015549052;11.37;-10.97;0.91;0.51;-18.47;0.86;Pack 1;Large;53.31080729166667;48.94778645833333;44.4671875;58.15286458333333;48.38671875;48.70520833333333;85.35182291666666;10.176933333333332;1.63;13.73;11.96;9.576766666666666;10.090166666666667;9.563366666666669;10.6105;8.549833333333334;9.963333333333335;sampling/repos_projects_filtered_top100stars/Matlab-Machine/004_Data regression prediction based on support vector machine (libsvm)/main.m;138;Matlab-Machine/004_Data regression prediction based on support vector machine (libsvm)/main.m;;Removed unnecessary comments in Chinese for better readability., Replaced unused variables in the `svmpredict` function with a tilde (`~`) for efficiency., Improved code formatting and alignment for better code organization., Enhanced code consistency by adjusting spacing and indentation., Simplified the title string concatenation for plot titles., Enhanced code readability and maintainability for easier future modifications.;Improved Code Readability & Maintainability, Improved Code Efficiency, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Plots, Improved Code Readability & Maintainability;Warning Control, Clearing Variables, Vectorized Operations, Consistent Formatting, Grid on, Consolidation;Improved Code Efficiency, Removed Unnecessary Code, Vectorization, Improved Code Readability & Maintainability, Others, Improved Code Readability & Maintainability;Removed unnecessary `warning off` statement, as it's not recommended to suppress warnings without a valid reason., Combined `close all`, `clear`, and `clc` statements into a single line for better readability., Removed redundant parentheses in the code, making it more concise., Used `deal` to initialize `ps_input` and `ps_output` structures in a single line, reducing code duplication., Replaced `sum((T_sim1' - T_train).^2) ./ M` with `mean((T_sim1' - T_train).^2)` to calculate the mean squared error more efficiently., Applied similar optimizations to other calculations, such as `R1`, `R2`, `mae1`, `mae2`, `mbe1`, and `mbe2`., Removed unnecessary semicolons at the end of lines, making the code more concise., Kept the original code's logic and functionality intact, ensuring that the optimized code produces the same results as the original code.;Improved Error Handling, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, nan, nan, nan, Removed Unnecessary Code, nan;Removed unnecessary semicolons at the end of lines to improve readability., Combined multiple commands into single lines where possible to reduce the number of lines of code., Preallocated memory for matrices T\_sim1 and T\_sim2 to improve performance and reduce memory fragmentation., Removed unused variables to reduce memory usage and improve code readability., Combined plotting commands into single lines to reduce the number of lines of code and improve readability., Simplified the calculation of R2, MAE, and MBE metrics by removing unnecessary calculations., Improved code comments and added additional comments to improve code readability and maintainability., Removed unnecessary commands such as 'disp' to reduce output clutter and improve code readability.;Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Memory Management, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, nan, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability
æ¡ˆä¾‹16 å•å±‚ç«žäº‰ç¥žç»ç½‘ç»œçš„æ•°æ®åˆ†ç±»â€”æ‚£è€…ç™Œç—‡å‘ç—…é¢„æµ‹__chapter16;107.53997192377574;8.16;231.1386260985824;7.6%;210.5945861816775;213.15929616298135;210.57342681882244;99.37576700845383;111.52824147530676;12.15;3.99;1.04;1.49;-99.07;0.53;Pack 1;Medium;55.37057291666667;132.49622395833333;129.79713541666666;127.65065104166666;127.4679688;48.70520833333333;107.47083333333332;9.156566666666668;0.61;13.46;11.74;19.133633333333332;17.740033333333333;17.739833333333333;17.439733333333333;8.549833333333334;9.389933333333332;sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/HeuristicAlgorithmï¼ˆè¡¥åˆ†å¯å‘å¼ç®—æ³•ï¼ŒåŒ…æ‹¬ç¥žç»ç½‘ç»œã€æ¨¡æ‹Ÿé€€ç«ã€é—ä¼ ç®—æ³•ï¼‰/ç¥žç»ç½‘ç»œç®—æ³•/MATLABç¥žç»ç½‘ç»œ30ä¸ªæ¡ˆä¾‹åˆ†æž/æ¡ˆä¾‹16 å•å±‚ç«žäº‰ç¥žç»ç½‘ç»œçš„æ•°æ®åˆ†ç±»â€”æ‚£è€…ç™Œç—‡å‘ç—…é¢„æµ‹/chapter16.m;306;Algorithms_MathModels/HeuristicAlgorithmï¼ˆè¡¥åˆ†å¯å‘å¼ç®—æ³•ï¼ŒåŒ…æ‹¬ç¥žç»ç½‘ç»œã€æ¨¡æ‹Ÿé€€ç«ã€é—ä¼ ç®—æ³•ï¼‰/ç¥žç»ç½‘ç»œç®—æ³•/MATLABç¥žç»ç½‘ç»œ30ä¸ªæ¡ˆä¾‹åˆ†æž/æ¡ˆä¾‹16 å•å±‚ç«žäº‰ç¥žç»ç½‘ç»œçš„æ•°æ®åˆ†ç±»â€”æ‚£è€…ç™Œç—‡å‘ç—…é¢„æµ‹/chapter16.m;;Code Refactoring, Data Transposition, Normalization Efficiency, Enhanced Network Training, Improved Prediction, Removed Unused Code;Improved Code Readability & Maintainability, nan, nan, nan, nan, Removed Unnecessary Code;Semicolon Usage, Clearer Variable Initialization, Direct Transposition, Consistent Formatting, Efficient Web Call, Commenting and Documentation;Improved Code Readability & Maintainability, No Manual Inspection, Others, Improved Code Readability & Maintainability, nan, Improved Comments;Removed unnecessary HTML code, Removed unnecessary comments, Used `clearvars` instead of `clear`, Removed unnecessary semicolons, Reformatted the code, Removed unnecessary variables, Simplified the code;Removed Unnecessary Code, Improved Comments, Removed Unnecessary Code, Removed Unnecessary Code, Improved Code Readability & Maintainability, Removed Unnecessary Code, Improved Code Readability & Maintainability;Removed unnecessary comments and HTML code for better readability and reduced file size., Removed unnecessary semicolons at the end of lines to improve code clarity, as they suppress output and are not needed in this case., Removed redundant comments explaining the function of built-in Matlab functions, as they are self-explanatory and do not add value to the code., Removed the web browser command at the end of the code, as it is not necessary for the code execution and does not contribute to the energy optimization., Maintained the original variable names and code structure to keep the code familiar and easy to understand for the original author and other users., The optimized code is more energy-efficient as it has reduced unnecessary operations, such as displaying HTML code and comments, and has improved code readability and maintainability.;Improved Code Readability & Maintainability, nan, Improved Comments, nan, nan, Improved Code Readability & Maintainability
034_Data classification prediction based on partial least squares algorithm__main;120.69386596686869;21.32;114.61779530838832;17.7%;118.31021270745164;120.6283126830977;133.85766042076867;99.37576700845383;104.64876454684418;5.27;-16.05;0.87;0.25;-13.66;0.88;Pack 1;Large;60.79049479166667;55.746875;46.03554688;50.715625;53.46041666666667;48.70520833333333;119.1832031;10.196933333333332;1.65;12.94;11.84;8.85;10.036933333333332;9.777;10.643733333333333;8.549833333333334;8.783100000000001;sampling/repos_projects_filtered_top100stars/Matlab-Machine/034_Data classification prediction based on partial least squares algorithm/main.m;142;Matlab-Machine/034_Data classification prediction based on partial least squares algorithm/main.m;;Avoid Redundant Commands, Combine Similar Operations, Streamline Processing, Enhance Readability, Maintain Functionality;Removed Unnecessary Code, Improved Code Readability & Maintainability, Improved Code Efficiency, Improved Code Readability & Maintainability, nan;Transposition Optimization, Model Creation, Data Normalization and Denormalization, Plotting and Confusion Matrices;Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Improved Plots;Removed `warning off` as it's generally not recommended to suppress warnings, instead, it's better to fix the warnings., Changed `clear` to `clear variables` to only clear variables and not functions or other objects., Removed unnecessary semicolons at the end of lines., Combined the import and split of data into training and testing sets into a single step., Used `size(res, 1)` to get the number of rows in the data, instead of hardcoding `357`., Used `mapminmax` to normalize both the training and testing data together, instead of normalizing them separately., Removed unnecessary parentheses around `ones(M, 1)` and `ones(N, 1)`., Simplified the calculation of `error1` and `error2` by removing the unnecessary multiplication by `100`., Removed unnecessary semicolons at the end of lines in the plotting code., Improved code readability by adding spaces around operators and using consistent indentation.;nan, No Manual Inspection, Removed Unnecessary Code, nan, Improved Code Efficiency, nan, Improved Matrix Operations, Improved Code Readability & Maintainability, Improved Plots, Improved Code Readability & Maintainability;Removed unnecessary comments and blank lines to reduce the size of the code and improve readability., Combined multiple variable declarations into single lines to reduce the number of lines of code., Removed the sorting of the predicted and actual values before computing the error, as the order of the values does not affect the calculation of the error., Removed the confusion matrix code, as it is not necessary for the main functionality of the code and can be added back later if needed.;Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Removed Unnecessary Code, Improved Matrix Operations
M__Untitled;105.69526112873768;6.32;106.67918802894808;6.0%;116.49252624507838;103.57543843584912;109.02698211669922;99.37576700845383;108.3000503541436;8.92;2.60;1.02;1.41;-8.19;0.93;Pack 2;Medium;68.82044270833333;65.13697916666666;72.94375;57.52486979166667;62.62382813;48.70520833333333;78.79361979166667;9.0633;0.51;12.31;11.66;8.9833;9.2433;8.91;9.310066666666668;8.549833333333334;9.069766666666666;sampling/repos_projects_filtered_top100stars/Math_Model/2-1å›½èµ›é¢˜ç›®+è®ºæ–‡/2012/B149/B149/B149æºç¨‹åº/M/Untitled.m;120;Math_Model/2-1å›½èµ›é¢˜ç›®+è®ºæ–‡/2012/B149/B149/B149æºç¨‹åº/M/Untitled.m;;Vectorization, Preallocation, Optimized Loop Logic, Conditional Assignment, Eliminating Redundant Operations;Vectorization, Improved Memory Management, Improved Indexing & Loops, nan, Removed Unnecessary Code;Precompute Trigonometric Values, Vectorization, Conditional Filtering, Preallocate Arrays, Remove Unnecessary Calculations;Improved Memory Management, Vectorization, nan, Improved Memory Management, nan;Precompute values, Loop optimization, Vectorized operations, Avoid repeated computations, Use `find` instead of loops, Remove unnecessary variables, Simplify code structure;Improved Memory Management, Improved Indexing & Loops, Vectorization, No Manual Inspection, Improved Indexing & Loops, Removed Unnecessary Code, Improved Code Readability & Maintainability;Preallocating arrays, Removing unnecessary variables, Removing unnecessary calculations, Simplifying expressions, Removing unnecessary statements;Improved Memory Management, Removed Unnecessary Code, No Manual Inspection, Improved Code Readability & Maintainability, No Manual Inspection
chap11__chap11_2;107.47215881344746;8.10;113.12310994473908;7.5%;110.80646311440503;116.76816965748051;104.2664627076049;99.37576700845383;113.11870880111432;13.74;5.65;1.05;1.70;2.31;1.02;Pack 2;Medium;59.622395833333336;62.73476563;53.73697916666666;59.67747395833333;58.99635416666667;48.70520833333333;99.27200520833334;9.216533333333333;0.67;12.14;11.66;9.556700000000001;9.343466666666668;9.443433333333333;9.2035;8.549833333333334;9.690133333333332;sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/ã€ŠMATLABå›¾åƒå¤„ç†ã€‹æºæ–‡ä»¶/æœ¬ä¹¦æºæ–‡ä»¶/chap11/chap11_2.m;134;Algorithms_MathModels/ã€ŠMATLABå›¾åƒå¤„ç†ã€‹æºæ–‡ä»¶/æœ¬ä¹¦æºæ–‡ä»¶/chap11/chap11_2.m;;Removed unnecessary commands like `close all`, `clear all`, and `clc` as they are not directly related to image processing and can be omitted., Combined repetitive code blocks for calculating RGB component averages and standard deviations into a single function to avoid code duplication and improve readability., Removed redundant double conversion for RGB components as imread function already returns the image as double type., Used meaningful variable names and comments for better code understanding., Removed unnecessary default figure position and color settings., Refactored code to improve modularity and maintainability.;Removed Unnecessary Code, Improved Code Readability & Maintainability, nan, nan, nan, Improved Code Readability & Maintainability;Function Extraction, Clear Command, Standard Deviation Calculation, Comment Clarification, Code Structuring;Improved Code Readability & Maintainability, No Manual Inspection, No Manual Inspection, Improved Comments, Improved Code Readability & Maintainability;Reduced memory allocation, Improved code readability, Removed redundant type conversions, Used `std2` instead of `std(std())`, Improved figure properties setting, Simplified image display;Improved Memory Management, Improved Code Readability & Maintainability, Removed Unnecessary Code, Improved Code Efficiency, Improved Plots, Improved Plots;Preallocate memory for the variables R, G, and B using the `zeros()` function to avoid memory reallocation during the loop, which can significantly improve performance., Combine the code blocks that read the images and convert them to double. This reduces repetition and makes the code more readable., Calculate the mean and standard deviation for the flower and leaf images immediately after reading and converting them to double. This avoids unnecessary repetition of the same operations for each image., The original code has some unnecessary repetition in setting the default figure position and color. This has been optimized by moving the `set()` function calls before displaying the images., The code for reading and displaying the third image has been combined into a single block to improve readability and reduce repetition.;Improved Memory Management, nan, nan, Improved Plots, Improved Code Readability & Maintainability
é™„ä»¶__profit;106.23679250085844;6.86;109.77554372154216;6.5%;104.57187805176363;100.28529459640848;120.49750315343069;99.37576700845383;110.1689051310066;10.79;3.93;1.04;1.57;5.60;1.05;Pack 2;Medium;60.64466145833333;54.6078125;78.96966145833333;56.93359375;66.97109375;48.70520833333333;101.20989583333332;9.123299999999999;0.57;11.96;11.64;9.256866666666669;8.850100000000001;8.7499;9.136666666666667;8.549833333333334;9.516633333333331;sampling/repos_projects_filtered_top100stars/Math_Model/2-1å›½èµ›é¢˜ç›®+è®ºæ–‡/2012/B077/é™„ä»¶/é™„ä»¶/profit.m;111;Math_Model/2-1å›½èµ›é¢˜ç›®+è®ºæ–‡/2012/B077/é™„ä»¶/é™„ä»¶/profit.m;;Replaced 'clc' with 'clear' to only clear workspace variables, as clearing the command window is unnecessary for energy optimization., Added comments for better code readability and understanding., Improved variable names for clarity and maintainability., Removed unnecessary operations and calculations to streamline the code and improve efficiency., Enhanced the structure of the code to make it more organized and optimized for energy efficiency analysis.;nan, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, nan, nan;Vectorization, Logical Indexing, Code Clarity, Optimization of Arithmetic Operations;Vectorization, Improved Indexing & Loops, Improved Code Readability & Maintainability, nan;Removed unnecessary statements, Vectorized operations, Preallocated memory, Removed unnecessary variables, Improved code organization, Removed magic numbers;Removed Unnecessary Code, Vectorization, Improved Memory Management, Removed Unnecessary Code, Improved Code Readability & Maintainability, Removed Unnecessary Code;Replaced `find(data2<30)` with `data2<30`. The `find` function is not necessary in this case as we can directly use the logical indexing., Replaced `sum(data2)` with `sum(data2, 2)`. This is because we need to sum the values of each row, not the entire matrix., Combined the three lines of code for `power` into one line. This reduces the number of temporary variables and operations., Removed the comment `% cç±»ç”µæ± æ¯å—å®‰è£…åœ¨å››é¢å¢™ä¸Šçš„35å¹´åˆ©æ¶¦` as it is not necessary for the code to run and does not provide any additional information.;Improved Indexing & Loops, nan, nan, nan
æ¡ˆä¾‹3 é—ä¼ ç®—æ³•ä¼˜åŒ–BPç¥žç»ç½‘ç»œ-éžçº¿æ€§å‡½æ•°æ‹Ÿåˆ__Genetic;113.6501948038834;14.27;213.68285471602184;12.6%;210.3642384846423;218.18164469415595;227.7262379964775;99.37576700845383;108.18779042550209;8.81;-5.46;0.95;0.62;-102.18;0.51;Pack 2;Large;49.73984375;131.4378906;117.8210938;126.65846354166666;96.3984375;48.70520833333333;83.93541666666667;9.776866666666669;1.23;11.63;11.62;18.13333333333333;18.119966666666667;18.326700000000002;19.2737;8.549833333333334;9.4233;sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/HeuristicAlgorithmï¼ˆè¡¥åˆ†å¯å‘å¼ç®—æ³•ï¼ŒåŒ…æ‹¬ç¥žç»ç½‘ç»œã€æ¨¡æ‹Ÿé€€ç«ã€é—ä¼ ç®—æ³•ï¼‰/ç¥žç»ç½‘ç»œç®—æ³•/MATLABç¥žç»ç½‘ç»œ30ä¸ªæ¡ˆä¾‹åˆ†æž/æ¡ˆä¾‹3 é—ä¼ ç®—æ³•ä¼˜åŒ–BPç¥žç»ç½‘ç»œ-éžçº¿æ€§å‡½æ•°æ‹Ÿåˆ/Genetic.m;291;Algorithms_MathModels/HeuristicAlgorithmï¼ˆè¡¥åˆ†å¯å‘å¼ç®—æ³•ï¼ŒåŒ…æ‹¬ç¥žç»ç½‘ç»œã€æ¨¡æ‹Ÿé€€ç«ã€é—ä¼ ç®—æ³•ï¼‰/ç¥žç»ç½‘ç»œç®—æ³•/MATLABç¥žç»ç½‘ç»œ30ä¸ªæ¡ˆä¾‹åˆ†æž/æ¡ˆä¾‹3 é—ä¼ ç®—æ³•ä¼˜åŒ–BPç¥žç»ç½‘ç»œ-éžçº¿æ€§å‡½æ•°æ‹Ÿåˆ/Genetic.m;;Removed unnecessary comments and code duplication to improve code readability., Avoided unnecessary variable assignments and calculations to reduce memory usage., Streamlined the loop structures and function calls to enhance code efficiency., Simplified the code structure by removing redundant operations and improving variable naming conventions.;Improved Code Readability & Maintainability, nan, nan, nan;Vectorization and Preallocation, Loop Optimization, Code Clarity and Readability, Avoiding Redundant Computations, Plotting and Display;Improved Memory Management, Improved Indexing & Loops, Improved Code Readability & Maintainability, Removed Unnecessary Code, Improved Plots;Parallelization, Vectorization, Code organization, Removed unnecessary variables, Improved comments;Improved Parallel Processing, Vectorization, Improved Code Readability & Maintainability, Removed Unnecessary Code, Improved Comments;Reduced the number of function calls by removing redundant function calls and storing the results in variables., Removed unnecessary comments and white spaces to reduce the size of the code., Combined multiple assignment statements into one line to reduce the number of lines of code., Used vectorized operations instead of loops where possible to improve performance., Used preallocation for arrays to improve memory usage and performance., Removed unused variables to reduce memory usage., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data types for storing and manipulating data., Removed unnecessary calculations and operations to improve performance., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data., Simplified the code by removing unnecessary variables and operations., Used more efficient data types for storing and manipulating data., Used more efficient algorithms for genetic algorithm operations such as crossover and mutation., Used more efficient data structures for storing and accessing data.;nan, Improved Comments, Removed Unnecessary Code, Improved Indexing & Loops, Improved Memory Management, Improved Memory Management, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, nan, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Removed Unnecessary Code, Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency
chap11__chap11_14;102.52995045980984;3.15;103.86363423663232;3.1%;125.9599782307865;119.84069162998736;109.90756632487756;99.37576700845383;111.08412119543644;11.71;8.55;1.08;3.71;-14.88;0.88;Pack 1;Small;66.87096354166667;45.739583333333336;51.94882813;48.6328125;53.35976563;48.70520833333333;111.50247395833334;8.823233333333334;0.27;11.54;11.62;8.5565;9.596733333333333;8.790033333333334;8.576466666666667;8.549833333333334;9.476600000000001;sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/ã€ŠMATLABå›¾åƒå¤„ç†ã€‹æºæ–‡ä»¶/æœ¬ä¹¦æºæ–‡ä»¶/chap11/chap11_14.m;135;Algorithms_MathModels/ã€ŠMATLABå›¾åƒå¤„ç†ã€‹æºæ–‡ä»¶/æœ¬ä¹¦æºæ–‡ä»¶/chap11/chap11_14.m;;Variable Naming, Code Readability, Reduced Redundancy, Optimized Comments, Enhanced Efficiency;Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Removed Unnecessary Code, nan, Improved Code Efficiency;Combined `regionprops` Calls, Efficient Data Extraction;nan, nan;Combined image reading and conversion, Reused variables, Combined regionprops call, Vectorized extraction of properties, Improved variable naming;Improved Code Efficiency, Improved Code Efficiency, Improved Code Efficiency, Vectorization, Improved Code Readability & Maintainability;Combine the display of area and centroid values into a single line to reduce redundancy., Extract area and centroid values from the regionprops structs to reduce memory usage., Use the cat function to concatenate centroid values to avoid creating unnecessary variables., Use semicolons at the end of lines to suppress unnecessary output and improve code readability.;nan, nan, Removed Unnecessary Code, Improved Code Readability & Maintainability
quadRotor3d__MAIN_minThrottleTraj;110.42810821529515;11.05;111.56485188803248;10.0%;111.73208821620015;112.36141611733474;171.5713470458965;99.37576700845383;112.90755462624752;13.53;2.48;1.02;1.22;1.18;1.01;Pack 2;Large;49.1359375;56.56835938;46.70325520833333;59.364583333333336;47.1265625;48.70520833333333;65.68606770833334;9.530266666666666;0.98;11.27;11.59;9.363733333333334;9.3634;9.5435;10.024;8.549833333333334;9.289866666666668;sampling/repos_projects_filtered_top100stars/OptimTraj/demo/quadRotor3d/MAIN_minThrottleTraj.m;94;OptimTraj/demo/quadRotor3d/MAIN_minThrottleTraj.m;;Removed unnecessary spaces and aligned the code for better readability., Replaced the multiple `addpath` calls with a single call with paths separated by commas., Removed unnecessary comments and redundant variable assignments to streamline the code., Improved code formatting and consistency for better maintainability., No significant algorithmic changes were made as the focus was on enhancing code readability and maintainability.;Improved Code Readability & Maintainability, Removed Unnecessary Code, Improved Comments, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability;Code Clarity and Readability, Vectorization and Efficient Operations, Memory Management, Function Calls;Improved Code Readability & Maintainability, Vectorization, Improved Memory Management, Others;Clearing variables, Path addition, Removing unnecessary brackets, Code organization and formatting, Comment optimization;Removed Unnecessary Code, Others, Removed Unnecessary Code, Improved Code Readability & Maintainability, Improved Comments;Removed the use of `load` function and directly assigned the output to `p`, as `load` can be slow and inefficient when used frequently., Combined multiple lines of code into single lines where possible, reducing the total number of lines and improving readability., Removed unnecessary parentheses around function handles to improve readability and reduce clutter., Removed the comments that do not provide any additional information, as they can make the code harder to read and understand., Removed the use of the `problem` structure and directly assigned the values to the variables, as it can improve performance and reduce memory usage. However, this change may affect the readability and maintainability of the code.;Improved Code Efficiency, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Comments, Improved Code Readability & Maintainability
testfunctions__main;108.22903442384948;8.85;107.19902801519687;8.2%;115.20978749598144;118.80202280675294;108.9402135212246;99.37576700845383;108.3986378987708;9.02;0.17;1.00;1.02;-6.81;0.94;Pack 1;Small;52.77070313;58.990625;63.612630208333336;63.19583333333333;60.34791666666667;48.70520833333333;97.60130208333334;9.350066666666667;0.80;11.06;11.58;9.2433;9.183233333333334;9.123333333333333;8.6966;8.549833333333334;9.3433;sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/MATLABæ™ºèƒ½ç®—æ³•30ä¸ªæ¡ˆä¾‹åˆ†æž/chapter17 åŸºäºŽPSOå·¥å…·ç®±çš„å‡½æ•°å¯»ä¼˜ç®—æ³•/testfunctions/main.m;173;Algorithms_MathModels/MATLABæ™ºèƒ½ç®—æ³•30ä¸ªæ¡ˆä¾‹åˆ†æž/chapter17 åŸºäºŽPSOå·¥å…·ç®±çš„å‡½æ•°å¯»ä¼˜ç®—æ³•/testfunctions/main.m;;Reducing Maximum Velocity, Code Readability, Comments, Optimized Parameters;nan, Improved Code Readability & Maintainability, Improved Comments, Improved Code Efficiency;Whitespace and Formatting, Comments, Vectorized Operations, Variable Naming;Improved Code Readability & Maintainability, Improved Comments, Vectorization, Improved Code Readability & Maintainability;Removed unnecessary `clear` and `clc` commands, Improved code readability, No other optimizations were possible;Removed Unnecessary Code, Improved Code Readability & Maintainability, No Optimization;"Adding semicolons (;) at the end of each statement, Removing unnecessary spaces, No changes were made to the actual logic or functionality of the code, as the given code is already quite optimized and does not contain any obvious energy inefficiencies.";nan, Improved Code Readability & Maintainability, nan
æ¡ˆä¾‹22 LVQç¥žç»ç½‘ç»œçš„é¢„æµ‹â€”â€”äººè„¸æœå‘è¯†åˆ«__chapter22_bp;107.7074645996055;8.33;226.0357299804785;7.7%;218.3207560221471;214.35262400302452;210.47978312167496;99.37576700845383;112.0486378987242;12.67;4.34;1.04;1.52;-106.27;0.51;Pack 1;Large;56.17955729166667;110.71393229166668;136.80260416666667;124.1300781;130.6820313;48.70520833333333;118.87942708333334;9.316533333333332;0.77;10.87;11.56;18.607066666666665;18.1535;18.24;17.573233333333334;8.549833333333334;9.5833;sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/HeuristicAlgorithmï¼ˆè¡¥åˆ†å¯å‘å¼ç®—æ³•ï¼ŒåŒ…æ‹¬ç¥žç»ç½‘ç»œã€æ¨¡æ‹Ÿé€€ç«ã€é—ä¼ ç®—æ³•ï¼‰/ç¥žç»ç½‘ç»œç®—æ³•/MATLABç¥žç»ç½‘ç»œ30ä¸ªæ¡ˆä¾‹åˆ†æž/æ¡ˆä¾‹22 LVQç¥žç»ç½‘ç»œçš„é¢„æµ‹â€”â€”äººè„¸æœå‘è¯†åˆ«/chapter22_bp.m;291;Algorithms_MathModels/HeuristicAlgorithmï¼ˆè¡¥åˆ†å¯å‘å¼ç®—æ³•ï¼ŒåŒ…æ‹¬ç¥žç»ç½‘ç»œã€æ¨¡æ‹Ÿé€€ç«ã€é—ä¼ ç®—æ³•ï¼‰/ç¥žç»ç½‘ç»œç®—æ³•/MATLABç¥žç»ç½‘ç»œ30ä¸ªæ¡ˆä¾‹åˆ†æž/æ¡ˆä¾‹22 LVQç¥žç»ç½‘ç»œçš„é¢„æµ‹â€”â€”äººè„¸æœå‘è¯†åˆ«/chapter22_bp.m;;Removed unnecessary HTML comments and links that do not contribute to the functionality of the code, reducing code clutter and improving readability., Removed redundant iterations for thresholding the simulated output. Instead, directly applied thresholding to the entire matrix, improving efficiency., Simplified the thresholding logic by using vectorized operations, which are more efficient than nested loops., The optimization aims to streamline the code for better performance and readability without altering the core functionality of the face recognition neural network implementation.;Improved Code Readability & Maintainability, nan, Vectorization, Improved Code Readability & Maintainability;Clear Specific Variables, Vectorized Operations, Simplified Conditional Assignment, Removed Redundant Web Browser Calls;Removed Unnecessary Code, Vectorization, Improved Code Readability & Maintainability, nan;Removed unnecessary HTML comments and tables, which were not relevant to the code's functionality., Removed redundant `web browser` commands, which were not necessary for the code's execution., Combined the `clear all` and `clc` commands into a single line for better readability., Removed unnecessary semicolons at the end of each line, which are not required in Matlab., Simplified the calculation of `dtrain_label` and `dtest_label` using the `mod` function, which is more efficient than the original implementation., Replaced the `newff` function with `patternnet`, which is a more straightforward way to create a neural network in Matlab., Removed the `for` loop at the end, which was used to threshold the output of the neural network. Instead, I used a vectorized operation `T_sim = T_sim > 0.5` to achieve the same result more efficiently.;Improved Comments, Removed Unnecessary Code, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, nan, Improved Code Efficiency, Vectorization;Replaced the for-loop with the round() function to simplify the code and improve energy efficiency., No other major changes were made to the code as it is already quite efficient. The main energy consumption comes from the training and simulation of the neural network, which cannot be optimized further without changing the algorithm or the network architecture.;nan, nan
ç¬¬å››é—®__lengthstat;111.80774841306264;12.43;105.89250793460718;11.1%;109.99704538973164;110.33176320383404;108.69028269446378;99.37576700845383;108.04076995844176;8.67;-3.77;0.97;0.70;-1.96;0.98;Pack 2;Small;56.8671875;60.00729166666667;63.26236979166666;59.360677083333336;80.43763020833333;48.70520833333333;75.62057291666666;9.696933333333332;1.15;10.84;11.53;9.210033333333334;9.2301;8.6833;9.4034;8.549833333333334;9.289966666666666;sampling/repos_projects_filtered_top100stars/Math_Model/2-1å›½èµ›é¢˜ç›®+è®ºæ–‡/2013/A117/1A0902/ä»£ç /ç¬¬å››é—®/lengthstat.m;125;Math_Model/2-1å›½èµ›é¢˜ç›®+è®ºæ–‡/2013/A117/1A0902/ä»£ç /ç¬¬å››é—®/lengthstat.m;;Removed redundant function call within the loop, Reduced unnecessary variable reassignment, Improved readability;nan, Removed Unnecessary Code, Improved Code Readability & Maintainability;Constant Definition, Vector Preallocation, Code Readability;nan, Improved Memory Management, Improved Code Readability & Maintainability;Vectorization, Avoiding Temporary Variables, Reducing Memory Allocations, Code Simplification;Vectorization, No Manual Inspection, Improved Memory Management, Improved Code Readability & Maintainability;In the original code, the `lengthplot` function is called inside the loop, which can be computationally expensive. By moving the loop inside the `lengthplot` function, we can reduce the number of function calls, thus saving energy., The original code adds the result of `lengthplot` to `mat` in each iteration of the loop, which may cause memory reallocation and slow down the execution. To avoid this, we preallocate memory for `temp` by initializing it as a vector of zeros with the same size as `mat`. This way, we can add the results of `lengthplot` to `temp` without reallocating memory., In the original code, the result of the loop is divided by 1000 to obtain the average value of `mat`. However, since we have added 1000 results to `mat`, we should divide the final result by 1001 instead of 1000 to get the correct average., The variable `i` is used as the x-axis in the plot function. In the original code, `i` is defined as a vector from 1 to 850, but it is not used in the loop. To avoid unnecessary computation, we can move the definition of `i` after the loop.;nan, Improved Memory Management, nan, nan
Elmanç½‘ç»œé¢„æµ‹ä¸Šè¯è‚¡å¸‚å¼€ç›˜ä»·__elm_stockpredict;106.95489349355532;7.58;127.21733551026554;7.1%;106.68189341228572;107.44152221677749;104.6603820801111;99.37576700845383;107.50353240980766;8.13;0.55;1.01;1.07;0.82;1.01;Pack 1;Large;60.7703125;54.88867188;57.034505208333336;74.23710938;44.70625;48.70520833333333;98.62161458333334;9.296733333333334;0.75;10.15;11.50;9.536866666666668;8.6898;8.749966666666667;9.049966666666666;8.549833333333334;9.7367;sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/ã€ŠMATLABç¥žç»ç½‘ç»œåŽŸç†ä¸Žå®žä¾‹ç²¾è§£ã€‹éšä¹¦é™„å¸¦æºç¨‹åº/ç¬¬13ç«  ç¥žç»ç½‘ç»œåº”ç”¨å®žä¾‹/Elmanç½‘ç»œé¢„æµ‹ä¸Šè¯è‚¡å¸‚å¼€ç›˜ä»·/elm_stockpredict.m;225;Algorithms_MathModels/ã€ŠMATLABç¥žç»ç½‘ç»œåŽŸç†ä¸Žå®žä¾‹ç²¾è§£ã€‹éšä¹¦é™„å¸¦æºç¨‹åº/ç¬¬13ç«  ç¥žç»ç½‘ç»œåº”ç”¨å®žä¾‹/Elmanç½‘ç»œé¢„æµ‹ä¸Šè¯è‚¡å¸‚å¼€ç›˜ä»·/elm_stockpredict.m;;Replaced `clear, clc` with `clearvars` to only clear workspace variables without clearing command window history, resulting in a slight improvement in energy efficiency., Replaced `rng(now)` with `rng('shuffle')` to set the random number generator seed based on the current time in a more efficient way., Removed unnecessary web browser command at the end of the script to eliminate unnecessary energy consumption., Improved code readability by adding comments and organizing the code structure for better maintenance and understanding.;nan, nan, nan, Improved Code Readability & Maintainability;Vectorization and Preallocation, Simplified Initialization, Consistent Formatting, Efficient Matrix Indexing, Reduced Redundant Operations, Numerical Precision;Improved Memory Management, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, Improved Indexing & Loops, Removed Unnecessary Code, nan;Clearing variables, Parallelization, Vectorized operations, Removed unnecessary commands, Improved code readability;Removed Unnecessary Code, Improved Parallel Processing, Vectorization, Removed Unnecessary Code, Improved Code Readability & Maintainability;Removed unnecessary code, Improved readability, No significant energy optimization opportunities;Removed Unnecessary Code, Improved Code Readability & Maintainability, nan
æ¡ˆä¾‹5 åŸºäºŽBP_Adaboostçš„å¼ºåˆ†ç±»å™¨è®¾è®¡-å…¬å¸è´¢åŠ¡é¢„è­¦å»ºæ¨¡__Bp_Ada_Fore;115.99235076920984;16.62;108.42835032143437;14.3%;116.93160196951358;115.03680063887538;106.96227213546516;99.37576700845383;113.6934794107064;14.32;-2.30;0.98;0.86;-3.24;0.97;Pack 2;Large;53.30533854166666;67.48111979166667;59.95572916666666;57.15859375;52.734375;48.70520833333333;70.80364583333333;10.397033333333333;1.85;9.00;11.16;9.116766666666667;9.276766666666667;8.5899;8.950033333333334;8.549833333333334;9.963333333333335;sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/HeuristicAlgorithmï¼ˆè¡¥åˆ†å¯å‘å¼ç®—æ³•ï¼ŒåŒ…æ‹¬ç¥žç»ç½‘ç»œã€æ¨¡æ‹Ÿé€€ç«ã€é—ä¼ ç®—æ³•ï¼‰/ç¥žç»ç½‘ç»œç®—æ³•/MATLABç¥žç»ç½‘ç»œ30ä¸ªæ¡ˆä¾‹åˆ†æž/æ¡ˆä¾‹5 åŸºäºŽBP_Adaboostçš„å¼ºåˆ†ç±»å™¨è®¾è®¡-å…¬å¸è´¢åŠ¡é¢„è­¦å»ºæ¨¡/Bp_Ada_Fore.m;304;Algorithms_MathModels/HeuristicAlgorithmï¼ˆè¡¥åˆ†å¯å‘å¼ç®—æ³•ï¼ŒåŒ…æ‹¬ç¥žç»ç½‘ç»œã€æ¨¡æ‹Ÿé€€ç«ã€é—ä¼ ç®—æ³•ï¼‰/ç¥žç»ç½‘ç»œç®—æ³•/MATLABç¥žç»ç½‘ç»œ30ä¸ªæ¡ˆä¾‹åˆ†æž/æ¡ˆä¾‹5 åŸºäºŽBP_Adaboostçš„å¼ºåˆ†ç±»å™¨è®¾è®¡-å…¬å¸è´¢åŠ¡é¢„è­¦å»ºæ¨¡/Bp_Ada_Fore.m;;Removed unnecessary comments and code duplication to improve code readability and reduce energy consumption during execution., Utilized matrix operations where possible to enhance computational efficiency., Reorganized the code structure for better clarity and maintainability., Avoided unnecessary variable assignments to reduce memory usage and improve performance., Eliminated redundant calculations and optimized loops to minimize computational overhead., Ensured consistent variable naming conventions for easier understanding and maintenance.;Improved Code Readability & Maintainability, nan, Improved Code Readability & Maintainability, nan, Removed Unnecessary Code, Improved Code Readability & Maintainability;Code Clarity and Readability, Memory and Performance, Loop Optimization, Matlab Best Practices;Improved Code Readability & Maintainability, Improved Memory Management, Improved Indexing & Loops, nan;Pre-allocation of memory, Vectorization, Reducing redundant operations, Simplification of code, Removing unnecessary code;Improved Memory Management, Vectorization, Removed Unnecessary Code, Improved Code Readability & Maintainability, Removed Unnecessary Code;Removed unnecessary indexing of `D`, Simplified the update of `D`, Removed unnecessary indexing of `D` in the `for` loop, Simplified the normalization of `D`;Improved Indexing & Loops, Improved Matrix Operations, Improved Indexing & Loops, Improved Matrix Operations
chap13__chap13_18;100.46529744472936;1.09;110.79110260004526;1.1%;107.12104949954664;106.78082224524697;107.84575653071516;99.37576700845383;108.10996042878833;8.73;7.64;1.08;8.02;0.99;1.01;Pack 2;Small;44.18398438;57.81289063;66.40221354166667;51.11614583333333;58.81171875;48.70520833333333;88.88294270833332;8.5099;-0.04;-27.28;11.81;9.7835;8.9099;9.083366666666668;9.170033333333333;8.549833333333334;9.243266666666667;sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/ã€ŠMATLABå›¾åƒå¤„ç†ã€‹æºæ–‡ä»¶/æœ¬ä¹¦æºæ–‡ä»¶/chap13/chap13_18.m;135;Algorithms_MathModels/ã€ŠMATLABå›¾åƒå¤„ç†ã€‹æºæ–‡ä»¶/æœ¬ä¹¦æºæ–‡ä»¶/chap13/chap13_18.m;;Removed unnecessary commands, Replaced 'set(0, ...)' with 'set(groot, ...)' for setting default figure properties to avoid unnecessary figure handle creation and improve efficiency., Combined the image fusion calls into separate variables to avoid redundant function calls and improve code readability., Refactored comments for better readability and understanding of the code logic., Overall, the optimized code is cleaner, more efficient, and maintains the same functionality as the original code.;Removed Unnecessary Code, nan, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability, nan;`clear all` to `clearvars`, Removed `uint8` Conversion, Removed Redundant Comments, Added Titles to Subplots, Optimized `subplot` Syntax;Removed Unnecessary Code, nan, Improved Comments, Improved Plots, nan;Removed `clc`, Changed `clear all` to `clear variables`, Removed unnecessary whitespace, Improved figure creation, Improved subplot creation;Removed Unnecessary Code, No Manual Inspection, Removed Unnecessary Code, Improved Plots, Improved Plots;Preallocate memory for the images, Use single function call, Set default figure properties, Create figure and display images;Improved Memory Management, nan, Improved Plots, Improved Plots
Matlabæºç¨‹åº__ti31;105.40110880536376;6.03;106.03017323822132;5.7%;108.08920949301488;109.29180450443528;104.42546742757938;99.37576700845383;111.72045288083608;12.34;6.32;1.06;2.05;3.63;1.03;Pack 1;Small;70.02877604166666;78.22903645833334;68.29635416666666;77.00872395833333;54.4546875;48.70520833333333;99.77851563;8.516533333333333;-0.03;-180.94;12.38;9.063366666666669;8.756633333333333;9.470133333333331;9.056633333333332;8.549833333333334;9.663266666666667;sampling/repos_projects_filtered_top100stars/Math_Model/2-1å›½èµ›é¢˜ç›®+è®ºæ–‡/2013/A056/5486/Matlabæºç¨‹åº/ti31.m;116;Math_Model/2-1å›½èµ›é¢˜ç›®+è®ºæ–‡/2013/A056/5486/Matlabæºç¨‹åº/ti31.m;;Preallocate the 'juli' array, Use vectorization, Remove unnecessary semicolons;Improved Memory Management, Vectorization, No Manual Inspection;Preallocation of Memory, Vectorized Indexing;Improved Memory Management, Improved Indexing & Loops;;;Preallocate memory for the juli array, Store x in the corresponding position of juli, Use fix() function;Improved Memory Management, nan, Improved Code Efficiency
æ¨¡ç³Šèšç±»__fuzzy_cluster_analysis;106.12904052739226;6.75;206.37154591880775;6.4%;209.3528549194394;218.72864634179663;212.23704681398232;99.37576700845383;110.9754582722904;11.60;4.85;1.05;1.72;-98.38;0.53;Pack 1;Small;60.36484375;144.2;138.9679688;108.30442708333334;104.5089844;48.70520833333333;120.8390625;8.5298;-0.02;-337.10;12.44;17.313066666666664;17.853133333333336;17.579900000000002;18.1331;8.549833333333334;9.3499;sampling/repos_projects_filtered_top100stars/Algorithms_MathModels/FuzzyMathematicalModelæ¨¡ç³Šæ•°å­¦æ¨¡åž‹/æ¨¡ç³Šèšç±»/fuzzy_cluster_analysis.m;145;Algorithms_MathModels/FuzzyMathematicalModelæ¨¡ç³Šæ•°å­¦æ¨¡åž‹/æ¨¡ç³Šèšç±»/fuzzy_cluster_analysis.m;;Vectorization, Loop Optimization, Function Naming, Code Formatting;Vectorization, Improved Indexing & Loops, Improved Code Readability & Maintainability, Improved Code Readability & Maintainability;Preallocation of Matrices, Efficient Data Loading, Optimized Calculation, Improved Save Function, Code Clarity and Maintainability;Improved Memory Management, Improved Code Efficiency, Improved Code Efficiency, nan, Improved Code Readability & Maintainability;Vectorization, Avoiding find, Reducing memory allocation;Vectorization, nan, Improved Memory Management;"In the original code, the ""r"" matrix is not initialized before the nested loop that computes its values. This can lead to unnecessary computations and memory allocation. To optimize this, I initialized the ""r"" matrix with zeros before the loop., In the original code, the ""find"" function is used to index the elements in the ""b\_hat"" vector that need to be set to 1. However, the ""find"" function is not necessary in this case, as we can directly index the ""b\_hat"" vector using the logical condition ""r2 > lambda"". This optimization reduces the number of function calls and improves the code's energy efficiency.";nan, nan
